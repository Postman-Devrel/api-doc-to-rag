{
    "collection": {
        "info": {
            "_postman_id": "494236d9-3e5b-4c02-bb64-4bf299f5435e",
            "name": "API Documentation - docs.luma.com Copy",
            "description": "Generated from https://docs.luma.com/",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "updatedAt": "2025-11-01T12:51:57.000Z",
            "createdAt": "2025-11-01T12:51:32.000Z",
            "lastUpdatedBy": "21505573",
            "uid": "21505573-494236d9-3e5b-4c02-bb64-4bf299f5435e"
        },
        "item": [
            {
                "name": "Getting Started",
                "item": [
                    {
                        "name": "Test Authentication",
                        "id": "21bb894d-d72a-4438-84a3-b6fa402cd82e",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "$LUMA_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/user/get-self",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "user", "get-self"]
                            },
                            "description": "### Test Authentication\n\nAuthenticate your requests by including your API key in the `x-luma-api-key` header. This endpoint returns information about the authenticated user if the API key is valid.\n\n**Endpoint**: `GET /v1/user/get-self`\n\n**Example**:\n```bash\ncurl -H \"x-luma-api-key: $LUMA_API_KEY\" https://public-api.luma.com/v1/user/get-self\n```\n\n**Next Steps**:\n- Review the [API Conventions](#) guide to understand routing and versioning.\n- Review the [API Formats](#) guide for date, duration, and location formatting.\n- Check out code examples for implementation ideas.\n- Explore the API endpoints in the reference documentation.\n"
                        },
                        "response": [],
                        "uid": "21505573-21bb894d-d72a-4438-84a3-b6fa402cd82e"
                    }
                ],
                "id": "0b63924a-d2c0-49d6-ad92-b3096723931b",
                "uid": "21505573-0b63924a-d2c0-49d6-ad92-b3096723931b"
            },
            {
                "name": "API Conventions",
                "item": [
                    {
                        "name": "List Ticket Types for an Event",
                        "id": "466a391f-5ab3-4c7e-ab8c-659be88547e8",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer <API_KEY>"
                                }
                            ],
                            "url": {
                                "raw": "https://api.luma.com/v1/event/ticket-types/list?event_id={event_id}",
                                "protocol": "https",
                                "host": ["api", "luma", "com"],
                                "path": ["v1", "event", "ticket-types", "list"],
                                "query": [
                                    {
                                        "key": "event_id",
                                        "value": "{event_id}"
                                    }
                                ]
                            },
                            "description": "# Rate Limits\n\n- **GET endpoints**: 500 requests per 5 minutes per calendar\n- **POST endpoints**: 100 requests per 5 minutes per calendar (separate from GET limit)\n- **Block duration**: 1 minute when limit is exceeded\n\nWhen these limits are exceeded, the API returns a `429 Too Many Requests` response and blocks further requests for 1 minute.\n\nRate limits are tracked separately for GET and POST endpoints and are subject to change. For higher limits, contact [support@luma.com](mailto:support@luma.com).\n\n# API Formats\n\nNotes on various formats and quirks.\n\n## Dates\n\nThe Luma API uses ISO 8601 format for all date/time values.\n\n**Format**\n\n```\nYYYY-MM-DDTHH:mm:ss.sssZ\n```\n\n**Example**\n\n```\n2022-10-04T05:20:00.000Z\n```\n\nThis represents October 4, 2022 at 5:20 AM UTC, which translates to:\n\n- 1:20 AM Eastern Time\n- 10:20 PM Pacific Time (October 3)\n\nAll times are stored and returned in UTC. You'll need to handle timezone conversion for your users.\n\n## Durations\n\nDurations also follow the ISO 8601 format.\n\n\n# API Formats\n\nThis page outlines the required formats for timestamps and durations in all Luma API requests and responses.\n\n## Timestamps\n\n- All times are stored and returned in UTC.\n- Clients must handle timezone conversion for users.\n- Format: ISO 8601\n- Example: `2022-10-04T05:20:00Z`\n  - Represents October 4, 2022 at 5:20 AM UTC\n  - Eastern Time: 1:20 AM\n  - Pacific Time: 10:20 PM (October 3)\n\n## Durations\n\n- Follow ISO 8601 duration format.\n- Format pattern: `P[n]Y[n]M[n]DT[n]H[n]M[n]S`\n  - `P` marks the beginning of the duration\n  - `Y` = years\n  - `M` = months (before `T`) or minutes (after `T`)\n  - `D` = days\n  - `T` = time separator\n  - `H` = hours\n  - `S` = seconds\n- Example: `P1DT12H30M`\n  - Represents 1 day, 12 hours, and 30 minutes\n\n## Recommended Library\n\nUse any library that supports ISO 8601 parsing and formatting for your language of choice.\n\n# API Formats\n\nThis page outlines the required formats and conventions for all Luma API requests and responses.\n\n## Timestamps\n\n- All times are stored and returned in UTC.\n- Clients must handle timezone conversion for users.\n- Format: **ISO 8601**\n- Example: `2022-10-04T05:20:00Z`\n  - Represents October 4, 2022 at 5:20 AM UTC\n  - Eastern Time: 1:20 AM\n  - Pacific Time: 10:20 PM (October 3)\n\n## Durations\n\n- Use ISO 8601 duration format.\n- Pattern: `P[n]Y[n]M[n]DT[n]H[n]M[n]S`\n  - `P` marks the beginning of the duration\n  - `Y` = years\n  - `M` = months (before `T`) or minutes (after `T`)\n  - `D` = days\n  - `T` = time separator\n  - `H` = hours\n  - `S` = seconds\n- **Example**: `P1DT12H30M` (1 day, 12 hours, and 30 minutes)\n\n## Recommended Library\n\nWe recommend using [Luxon](https://moment.github.io/luxon/) for handling ISO 8601 dates and durations in JavaScript/TypeScript.\n\n## Locations\n\nEvent locations use **Google Maps Place IDs**.\n\n### Finding a Place ID\n\n1. Use the [Google Place ID Finder](https://developers.google.com/maps/documentation/javascript/examples/places-placeid-finder)\n2. Or use the Google Maps API to search and retrieve Place IDs programmatically.\n\n**Example**\n```json\n{\n  \"place_id\": \"ChIJN1t_tDeuEmsRUsoyG83frY4\"\n}\n```\n\nThis `place_id` uniquely identifies a specific location for maps and directions.\n\n# Code Examples\n\n## Demo Basketball Club\n\nWe've created a sample project that demonstrates how to use the Luma API to display a list of events on your website.\n\nRepository: https://github.com/luma-team/basketball-club-example\n\n### What It Demonstrates\n\n- Fetching events from the Luma API\n- Displaying events in a clean, responsive layout\n- Handling API authentication\n- Best practices for integrating Luma into your website\n\n### Getting Started with the Example\n\n1. Clone the repository\n2. Install dependencies\n3. Add your Luma API key to the environment variables\n4. Run the development server\n\nThis example provides a great starting point for building your own integration with the Luma API.\n\n# Rate Limits\n\nThis section describes the request limits enforced on the Luma API to ensure fair usage and availability.\n\n- **GET endpoints**: 500 requests per 5 minutes per calendar\n- **POST endpoints**: 100 requests per 5 minutes per calendar (tracked separately from GET limits)\n- **Block duration**: 1 minute when the limit is exceeded\n\nWhen you exceed these limits, the API returns a `429 Too Many Requests` response and blocks further requests for 1 minute. Contact [support@luma.com](mailto:support@luma.com) for higher limits or questions.\n\n# API Conventions\n\nThis page describes the patterns and naming conventions used across the Luma API.\n\n## API Path Structure\n\nRoutes usually follow the pattern:\n```\n/v{version}/{resource}/{action}\n```\n\nComponents:\n- **version**: The version number (e.g., `/v1/`, `/v2/`) representing the version of that specific API route, not the entire API.\n- **resource**: The entity being operated on (e.g., `event/ticket-types`, `events`, `calendars`, `users`).\n- **action**: The operation being performed (e.g., `list`, `get`, `create`, `update`, `delete`).\n\n> We apologize for inconsistencies as we're still transitioning older endpoints to this format.\n\n## Naming Convention\n\nWe're moving toward a consistent RESTful naming pattern. The `ticket-types` endpoints exemplify our target convention:\n\n```bash\nGET /v1/event/ticket-types/list    # List all ticket types for an event\nGET /v1/event/ticket-types/get     # Get a single ticket type\n```\n\n### List Ticket Types for an Event\nRetrieves all ticket types defined for a specific event.\n\n**Endpoint**: GET /v1/event/ticket-types/list\n\n**Query Parameters**:\n\n| Name     | Type   | Description                                             |\n|----------|--------|---------------------------------------------------------|\n| event_id | string | (required) The unique identifier of the event to query. |\n\n**Response**: An array of ticket-type objects for the given event."
                        },
                        "response": [],
                        "uid": "21505573-466a391f-5ab3-4c7e-ab8c-659be88547e8"
                    },
                    {
                        "name": "Get a Single Ticket Type",
                        "id": "e1e8e09f-5620-46d4-8c91-f48e13cd9f20",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer <API_KEY>"
                                }
                            ],
                            "url": {
                                "raw": "https://api.luma.com/v1/event/ticket-types/get?ticket_type_id={ticket_type_id}",
                                "protocol": "https",
                                "host": ["api", "luma", "com"],
                                "path": ["v1", "event", "ticket-types", "get"],
                                "query": [
                                    {
                                        "key": "ticket_type_id",
                                        "value": "{ticket_type_id}"
                                    }
                                ]
                            },
                            "description": "### Get a Single Ticket Type\nFetches details for one ticket type.\n\n**Endpoint**: GET /v1/event/ticket-types/get\n\n**Query Parameters**:\n\n| Name            | Type   | Description                                                |\n|-----------------|--------|------------------------------------------------------------|\n| ticket_type_id  | string | (required) The unique identifier of the ticket type to get. |\n\n**Response**: A single ticket-type object."
                        },
                        "response": [],
                        "uid": "21505573-e1e8e09f-5620-46d4-8c91-f48e13cd9f20"
                    },
                    {
                        "name": "Create a New Ticket Type",
                        "id": "de332004-6b47-42c4-bced-b14e5ea86632",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer <API_KEY>"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\"event_id\":\"{event_id}\",\"name\":\"{name}\",\"price\":{price}}",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://api.luma.com/v1/event/ticket-types/create",
                                "protocol": "https",
                                "host": ["api", "luma", "com"],
                                "path": ["v1", "event", "ticket-types", "create"]
                            },
                            "description": "### Create a New Ticket Type\nCreates a new ticket-type under the specified event.\n\n**Endpoint**: POST /v1/event/ticket-types/create\n\n**Body Parameters**:\n\n| Name     | Type   | Description                                                        |\n|----------|--------|--------------------------------------------------------------------|\n| event_id | string | (required) The unique identifier of the event.                     |\n| name     | string | (required) The human-readable name for the ticket type.            |\n| price    | number | (required) The cost of one ticket in smallest currency unit (cents). |\n\n**Response**: The newly created ticket-type object."
                        },
                        "response": [],
                        "uid": "21505573-de332004-6b47-42c4-bced-b14e5ea86632"
                    },
                    {
                        "name": "Update an Existing Ticket Type",
                        "id": "7adffdc0-7c96-4017-812f-7f39a30d91e0",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer <API_KEY>"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\"ticket_type_id\":\"{ticket_type_id}\",\"name\":\"{name}\",\"price\":{price}}",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://api.luma.com/v1/event/ticket-types/update",
                                "protocol": "https",
                                "host": ["api", "luma", "com"],
                                "path": ["v1", "event", "ticket-types", "update"]
                            },
                            "description": "### Update an Existing Ticket Type\nModifies properties of a ticket-type.\n\n**Endpoint**: POST /v1/event/ticket-types/update\n\n**Body Parameters**:\n\n| Name             | Type   | Description                                                      |\n|------------------|--------|------------------------------------------------------------------|\n| ticket_type_id   | string | (required) The unique identifier of the ticket type to update.   |\n| name             | string | (optional) New name for the ticket type.                         |\n| price            | number | (optional) New price in smallest currency unit (cents).          |\n\n**Response**: The updated ticket-type object."
                        },
                        "response": [],
                        "uid": "21505573-7adffdc0-7c96-4017-812f-7f39a30d91e0"
                    },
                    {
                        "name": "Delete a Ticket Type",
                        "id": "3f755d33-a180-4332-b920-8a919da320e5",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer <API_KEY>"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\"ticket_type_id\":\"{ticket_type_id}\"}",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://api.luma.com/v1/event/ticket-types/delete",
                                "protocol": "https",
                                "host": ["api", "luma", "com"],
                                "path": ["v1", "event", "ticket-types", "delete"]
                            },
                            "description": "### Delete a Ticket Type\nRemoves a ticket-type from the specified event.\n\n**Endpoint**: POST /v1/event/ticket-types/delete\n\n**Body Parameters**:\n\n| Name            | Type   | Description                                              |\n|-----------------|--------|----------------------------------------------------------|\n| ticket_type_id  | string | (required) The unique identifier of the ticket type to remove. |\n\n**Response**: A success message or deleted ticket-type identifier."
                        },
                        "response": [],
                        "uid": "21505573-3f755d33-a180-4332-b920-8a919da320e5"
                    }
                ],
                "id": "e3b2d8cd-beb7-4a24-8b25-3f5dbd2c0d0e",
                "uid": "21505573-e3b2d8cd-beb7-4a24-8b25-3f5dbd2c0d0e"
            },
            {
                "name": "Events",
                "item": [
                    {
                        "name": "Get Event",
                        "id": "19636207-03b8-49d5-b527-4ff1daa6eb60",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/get?event_id=EVENT_ID",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "get"],
                                "query": [
                                    {
                                        "key": "event_id",
                                        "value": "EVENT_ID"
                                    }
                                ]
                            },
                            "description": "## Get Event\n\nReturn admin information about an event that you have manage access for.\n\n**Endpoint**\n\n```\nGET https://public-api.luma.com/v1/event/get\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description         |\n|-----------------|--------|----------|---------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key.  |\n\n**Query Parameters**\n\n| Name      | Type   | Required | Description                                    |\n|-----------|--------|----------|------------------------------------------------|\n| event_id  | string | Yes      | The ID of the event to retrieve.               |\n\n**Response**\n\n- 200: Successful response returning event admin information."
                        },
                        "response": [],
                        "uid": "21505573-19636207-03b8-49d5-b527-4ff1daa6eb60"
                    },
                    {
                        "name": "Get Event",
                        "id": "5c574fe2-acea-404c-8760-28a37452ee6b",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/get?event_id=EVENT_ID",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "get"],
                                "query": [
                                    {
                                        "key": "event_id",
                                        "value": "EVENT_ID"
                                    }
                                ]
                            },
                            "description": "# Get Event\n\nReturn admin information about an event that you have manage access for.\n\n## HTTP Request\n\n```http\nGET https://public-api.luma.com/v1/event/get?event_id={event_id}\n```\n\n## Query Parameters\n\n| Name     | Type   | Description                               |\n|----------|--------|-------------------------------------------|\n| event_id | string | **Required.** The ID of the event to fetch. |\n\n## Response\n\n- **200**: Successful response.\n\n## Authorization\n\nMust include a valid Bearer token in the `Authorization` header:\n\n```bash\n-H \"Authorization: Bearer YOUR_API_KEY\"\n```\n\n*Note: The documentation did not list query parameters explicitly, so we assume `event_id` is required. Please verify the exact parameter names.*"
                        },
                        "response": [],
                        "uid": "21505573-5c574fe2-acea-404c-8760-28a37452ee6b"
                    },
                    {
                        "name": "Get Guest",
                        "id": "4da41927-8207-41c1-a978-d67e3235ce5c",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/get-guest?event_id=EVT_ID&id=IDENTIFIER",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "get-guest"],
                                "query": [
                                    {
                                        "key": "event_id",
                                        "value": "EVT_ID"
                                    },
                                    {
                                        "key": "id",
                                        "value": "IDENTIFIER"
                                    }
                                ]
                            },
                            "description": "## Get Guest\n\nRetrieve an event guest by looking them up via different identifiers.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/event/get-guest\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                         |\n|-----------------|--------|----------|-------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication. |\n\n**Query Parameters**\n\n| Name      | Type   | Required | Description                                                                             |\n|-----------|--------|----------|-----------------------------------------------------------------------------------------|\n| event_id  | string | Yes      | Event ID, usually starts with 'evt-'.                                                    |\n| id        | string | Yes      | Guest identifier: guest ID ('gst-'), ticket key, guest key ('g-'), or user's email.     |\n\n**Response**\n\n- 200: Successful response returning the event guest's details."
                        },
                        "response": [],
                        "uid": "21505573-4da41927-8207-41c1-a978-d67e3235ce5c"
                    },
                    {
                        "name": "Get Guests",
                        "id": "9f5fafc0-80c4-403b-aebb-fb687213a418",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/get-guests?event_id=EVENT_ID",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "get-guests"],
                                "query": [
                                    {
                                        "key": "event_id",
                                        "value": "EVENT_ID"
                                    }
                                ]
                            },
                            "description": "# Get Guests\n\nRetrieve a list of guests who have registered for or been invited to a specific event.\n\n## HTTP Request\n\n```http\nGET https://public-api.luma.com/v1/event/get-guests?event_id={event_id}&approval_status={approval_status}&pagination_cursor={cursor}&pagination_limit={limit}\n```\n\n## Query Parameters\n\n| Name               | Type   | Required | Description                                                                                  |\n|--------------------|--------|----------|----------------------------------------------------------------------------------------------|\n| event_id           | string | Yes      | Event ID (usually starts with `evt-`).                                                       |\n| approval_status    | string | No       | Filter by approval status. Allowed: `approved`, `session`, `pending_approval`, `invited`, `declined`, `waitlist`. |\n| pagination_cursor  | string | No       | Cursor for pagination from a previous response (`next_cursor`).                              |\n| pagination_limit   | number | No       | Number of guests to return (server-enforced maximum).                                       |\n\n## Response\n\n- **200**: Successful response with a list of guests and pagination metadata.\n\n## Authorization\n\nInclude a valid Bearer token in the `Authorization` header:\n\n```bash\n-H \"Authorization: Bearer YOUR_API_KEY\"\n```"
                        },
                        "response": [],
                        "uid": "21505573-9f5fafc0-80c4-403b-aebb-fb687213a418"
                    },
                    {
                        "name": "Get Guests",
                        "id": "2388a748-e711-4e42-b146-3b53719731ea",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/get-guests?event_id=EVT_ID&approval_status=approved&pagination_cursor=CURSOR&pagination_limit=10&sort_column=name&sort_direction=asc",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "get-guests"],
                                "query": [
                                    {
                                        "key": "event_id",
                                        "value": "EVT_ID"
                                    },
                                    {
                                        "key": "approval_status",
                                        "value": "approved"
                                    },
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "10"
                                    },
                                    {
                                        "key": "sort_column",
                                        "value": "name"
                                    },
                                    {
                                        "key": "sort_direction",
                                        "value": "asc"
                                    }
                                ]
                            },
                            "description": "## Get Guests\n\nRetrieve a paginated list of guests for a given event, with optional filtering, sorting, and pagination controls.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/event/get-guests\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                          |\n|----------------|--------|----------|--------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication |\n\n**Query Parameters**\n\n| Name              | Type              | Required | Description                                                                                          |\n|-------------------|-------------------|----------|------------------------------------------------------------------------------------------------------|\n| event_id          | string            | Yes      | The ID of the event to list guests for (e.g., `evt-...`).                                           |\n| approval_status   | string (enum)     | No       | Filter by guest approval status. Allowed: `approved`, `session`, `pending_approval`, `invited`, `declined`, `waitlist`. |\n| pagination_cursor | string            | No       | Cursor from previous response to fetch the next page of results.                                     |\n| pagination_limit  | number            | No       | Number of items to return (server may enforce a maximum).                                           |\n| sort_column       | string (enum)     | No       | Field to sort by. Allowed: `name`, `email`, `created_at`, `registered_at`, `checked_in_at`.         |\n| sort_direction    | string (enum)     | No       | Sort direction. Allowed: `asc`, `desc`, `asc nulls last`, `desc nulls last`.                       |\n\n**Response**\n- 200: Successful response returning a paginated list of event guests."
                        },
                        "response": [],
                        "uid": "21505573-2388a748-e711-4e42-b146-3b53719731ea"
                    },
                    {
                        "name": "List Event Coupons",
                        "id": "aa27926b-264d-49bf-b264-2fa5b6a92f39",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/coupons?event_id=EVENT_ID&pagination_cursor=CURSOR&pagination_limit=LIMIT",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "coupons"],
                                "query": [
                                    {
                                        "key": "event_id",
                                        "value": "EVENT_ID"
                                    },
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "LIMIT"
                                    }
                                ]
                            },
                            "description": "# List Event Coupons\n\nRetrieve a list of all coupons that have been created for a specific event.\n\n## HTTP Request\n```http\nGET https://public-api.luma.com/v1/event/coupons?event_id={event_id}&pagination_cursor={cursor}&pagination_limit={limit}\n```\n\n## Query Parameters\n\n| Name               | Type   | Required | Description                                                                                       |\n|--------------------|--------|----------|---------------------------------------------------------------------------------------------------|\n| event_id           | string | Yes      | Event ID (usually starts with `evt-`).                                                            |\n| pagination_cursor  | string | No       | Cursor for pagination (`next_cursor` from a previous response).                                   |\n| pagination_limit   | number | No       | Number of coupons to return (server-enforced maximum).                                            |\n\n## Response\n- **200**: Successful response with a list of coupon objects and pagination metadata.\n\n## Authorization\nInclude a valid Bearer token in the `Authorization` header:\n```bash\n-H \"Authorization: Bearer YOUR_API_KEY\"\n```"
                        },
                        "response": [],
                        "uid": "21505573-aa27926b-264d-49bf-b264-2fa5b6a92f39"
                    },
                    {
                        "name": "List Event Coupons",
                        "id": "543c3668-1018-4656-b747-1996e4b4cd2f",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/coupons?event_id=EVT_ID&pagination_cursor=CURSOR&pagination_limit=20",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "coupons"],
                                "query": [
                                    {
                                        "key": "event_id",
                                        "value": "EVT_ID"
                                    },
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "20"
                                    }
                                ]
                            },
                            "description": "## List Event Coupons\n\nList all coupons that have been created for a specific event.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/event/coupons\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                         |\n|----------------|--------|----------|-------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication. |\n\n**Query Parameters**\n\n| Name              | Type   | Required | Description                                                                          |\n|-------------------|--------|----------|--------------------------------------------------------------------------------------|\n| event_id          | string | Yes      | Event ID for which to list coupons (e.g., `evt-...`).                                 |\n| pagination_cursor | string | No       | Cursor from a previous response to retrieve the next page of results.                 |\n| pagination_limit  | number | No       | Number of items to return; server applies a maximum limit.                           |\n\n**Response**\n\n- 200: Successful response returning a paginated list of coupons for the specified event."
                        },
                        "response": [],
                        "uid": "21505573-543c3668-1018-4656-b747-1996e4b4cd2f"
                    },
                    {
                        "name": "Create Event",
                        "id": "c079da37-57db-48c2-ac1c-2f04cc513666",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"can_register_for_multiple_tickets\": false,\n    \"cover_url\": \"https://cdn.luma.com/example.jpg\",\n    \"coordinate\": { /* latitude, longitude object */ },\n    \"description_md\": \"# Event Title\\nEvent description in Markdown.\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/create",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "create"]
                            },
                            "description": "# Create Event\n\nCreate a new event under your account. You must be authenticated and have appropriate permissions.\n\n## HTTP Request\n\n```http\nPOST https://public-api.luma.com/v1/event/create\nContent-Type: application/json\nAuthorization: Bearer YOUR_API_KEY\n```\n\n## Body Parameters\n\n| Name                             | Type     | Required | Description                                                                            |\n|----------------------------------|----------|----------|----------------------------------------------------------------------------------------|\n| can_register_for_multiple_tickets | boolean  | No       | Allow attendees to register for multiple ticket types.                                 |\n| cover_url                        | uri      | No       | URL of the event cover image on the Luma CDN.                                         |\n| coordinate                       | object   | No       | Location coordinates, e.g., `{ latitude: number, longitude: number }`.                |\n| description_md                   | string   | No       | Event description in Markdown; converted to Spark format internally.                   |\n\n> Note: Additional required fields such as event name, start time, and end time are not shown in the screenshot. Please verify all required parameters in the full API reference."
                        },
                        "response": [],
                        "uid": "21505573-c079da37-57db-48c2-ac1c-2f04cc513666"
                    },
                    {
                        "name": "Create Event",
                        "id": "7bec84a8-52fd-4348-a71a-0ed3b462831b",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                },
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"name\": \"My Event\",\n    \"description_md\": \"## Event Details\\nThis event is awesome.\",\n    \"start_at\": \"2022-10-19T03:27:13.673Z\",  // assumed parameter\n    \"end_at\": \"2022-10-19T05:27:13.673Z\",\n    \"coordinate\": { \"latitude\": 37.7749, \"longitude\": -122.4194 },\n    \"geo_address_json\": { \"address\": \"1 Market St, San Francisco, CA\" },\n    \"max_capacity\": 100,\n    \"meeting_url\": \"https://example.com/meeting\",\n    \"name_requirement\": \"first_last\"\n}",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/create",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "create"]
                            },
                            "description": "## Create Event\n\nCreate a new event under your account. **Required**:\n- `name`: The event name.\n\n**Endpoint**\n```bash\nPOST https://public-api.luma.com/v1/event/create\n```\n\n**Headers**\n| Name           | Type   | Required | Description                        |\n|----------------|--------|----------|------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication. |\n\n**Body Parameters**\n| Name                | Type     | Required | Description                                                                                                      |\n|---------------------|----------|----------|------------------------------------------------------------------------------------------------------------------|\n| name                | string   | Yes      | The name of the event.                                                                                            |\n| description_md      | string   | No       | Event description in Markdown, converted to Spark format by Luma.                                                 |\n| start_at            | date-time| Yes*     | ISO 8601 start datetime for the event (assumed, not shown in screenshot).                                         |\n| end_at              | date-time| No       | ISO 8601 end datetime for the event.                                                                              |\n| coordinate          | object   | No       | `{ latitude: number, longitude: number }` describing event location coordinates.                                  |\n| geo_address_json    | object   | No       | Structured address object (e.g., `{ address: string }`) used for geocoding.                                       |\n| max_capacity        | integernull| No       | Maximum number of attendees; event closes when reached.                                                           |\n| meeting_url         | string   | No       | URL for virtual event meeting.                                                                                    |\n| name_requirement    | string (enum)| No       | Format of guest name fields. Allowed: `first_last`, `full_name`.                                                 |\n\n*`start_at` parameter is assumed based on typical API requirements; it was not visible in the provided screenshot.\n\n**Response**\n- 200: Successful creation returning the new event object."
                        },
                        "response": [],
                        "uid": "21505573-7bec84a8-52fd-4348-a71a-0ed3b462831b"
                    },
                    {
                        "name": "Create Event",
                        "id": "89055ecb-f003-405c-ba4e-c779f6764666",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"name\": \"My Event\",\n    \"slug\": \"aloha\",\n    \"meeting_url\": \"https://meet.example.com/room123\",\n    \"name_requirement\": \"full-name\",\n    \"phone_number_requirement\": null,\n    \"registration_questions\": [],\n    \"reminders_disabled\": false,\n    \"show_guest_list\": true\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/create",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "create"]
                            },
                            "description": "## Create Event\n\nCreate a new event with specified settings such as name, URL slug, virtual meeting link, and guest requirements.\n\n**Endpoint**\n\n```\nPOST https://public-api.luma.com/v1/event/create\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                                  |\n|-----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.        |\n| Content-Type    | string | Yes      | Set to `application/json`.                   |\n\n**JSON Body Parameters**\n\n| Name                      | Type                | Required | Description                                                                                      |\n|---------------------------|---------------------|----------|--------------------------------------------------------------------------------------------------|\n| name                      | string              | Yes      | Display name of the event.                                                                       |\n| slug                      | string              | Yes      | Unique URL slug (3–50 chars), used in `https://luma.com/{slug}`.                                  |\n| meeting_url               | string              | No       | Virtual meeting URL for the event (optional).                                                    |\n| name_requirement          | string (enum)       | No       | Format for guest names: `full-name` or `first-last`.                                             |\n| phone_number_requirement  | string or null      | No       | Phone number requirement setting; use `null` to disable.                                         |\n| registration_questions    | array               | No       | Array of custom questions to ask during guest registration.                                       |\n| reminders_disabled        | boolean             | No       | Set `true` to disable automatic event reminders (default `false`).                                |\n| show_guest_list           | boolean             | No       | Set `true` to allow guests to view the guest list (default `false`).                             |\n\n**Response**\n\n- 200: Successful creation returns the new event object, including its `id` and other details.\n\n> Note: Additional event settings (time, location, etc.) may exist but are not shown in this section. Please consult the full documentation for all available fields."
                        },
                        "response": [],
                        "uid": "21505573-89055ecb-f003-405c-ba4e-c779f6764666"
                    },
                    {
                        "name": "Create Event",
                        "id": "a299a07e-e872-4190-8922-483537e9da3b",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"can_register_for_multiple_tickets\": false,\n    \"cover_url\": \"https://cdn.luma.com/example.jpg\",\n    \"coordinate\": { \"latitude\": 40.7128, \"longitude\": -74.0060 },\n    \"description_md\": \"# Event Title\\nEvent description in Markdown.\",\n    \"show_guest_list\": true,\n    \"slug\": \"my-event-slug\",\n    \"start_at\": \"2022-10-19T03:27:13.673Z\",\n    \"timezone\": \"America/New_York\",\n    \"tint_color\": \"#bb2dc7\",\n    \"visibility\": \"public\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/create",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "create"]
                            },
                            "description": "# Create Event\n\nCreate a new event under your account. You must be authenticated and have appropriate permissions.\n\n## HTTP Request\n```http\nPOST https://public-api.luma.com/v1/event/create\nContent-Type: application/json\nAuthorization: Bearer YOUR_API_KEY\n```\n\n## Body Parameters\n\n| Name                             | Type       | Required | Description                                                                                   |\n|----------------------------------|------------|----------|-----------------------------------------------------------------------------------------------|\n| can_register_for_multiple_tickets | boolean    | No       | Allow attendees to register for multiple ticket types.                                        |\n| cover_url                        | uri        | No       | URL of an image uploaded to the Luma CDN.                                                     |\n| coordinate                       | object     | No       | Location coordinates (e.g., `{ latitude: number, longitude: number }`).                      |\n| description_md                   | string     | No       | Event description in Markdown; converted to Spark format internally.                          |\n| show_guest_list                  | boolean    | No       | Show guest list to approved guests.                                                           |\n| slug                             | string     | No       | URL slug for the event (3–50 characters). Must be unique.                                     |\n| start_at                         | date-time  | Yes      | Event start time in ISO 8601 format (e.g., `2022-10-19T03:27:13.673Z`).                      |\n| timezone                         | string     | Yes      | IANA timezone for the event (e.g., `America/New_York`).                                       |\n| tint_color                       | string     | No       | Hex color for event accent, e.g., `#bb2dc7` (no alpha).                                       |\n| visibility                       | string     | No       | Event visibility. Allowed: `public`, `members-only`, `private`.                                |\n\n> **Note**: Additional required fields such as event `name` and `end_at` are not shown in the screenshot. Please verify all required parameters in the full API reference."
                        },
                        "response": [],
                        "uid": "21505573-a299a07e-e872-4190-8922-483537e9da3b"
                    },
                    {
                        "name": "Update Guest Status",
                        "id": "f30f8bfb-4a52-4448-8908-a995e614584f",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Accept",
                                    "value": "application/json"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"status\": \"declined\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/update-guest-status",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "update-guest-status"]
                            },
                            "description": "## Update Guest Status\n\nUpdate the status of an event guest to reflect their attendance or invitation state.\n\n**Endpoint**\n\n```\nPOST https://public-api.luma.com/v1/event/update-guest-status\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                           |\n|-----------------|--------|----------|---------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication. |\n| Accept          | string | Yes      | `application/json`.                   |\n| Content-Type    | string | Yes      | `application/json`.                   |\n\n**JSON Body Parameters**\n\n| Name   | Type            | Required | Description                                                                                     |\n|--------|-----------------|----------|-------------------------------------------------------------------------------------------------|\n| status | string (enum)   | Yes      | The new status for the guest. Allowed: `approved`, `session`, `pending_approval`, `invited`, `declined`, `waitlist`. |\n\n**Response**\n\n- 200: Successful response. Returns the updated guest object or status confirmation.\n\n> Note: The documentation screenshot only shows the `status` field. If additional identifiers (e.g., `event_id`, guest `id`) are required to locate the guest, they were not displayed and should be included as per full API specification."
                        },
                        "response": [],
                        "uid": "21505573-f30f8bfb-4a52-4448-8908-a995e614584f"
                    },
                    {
                        "name": "Get Guests",
                        "id": "80b2b768-1f26-4779-8f28-3000b11db611",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/get-guests?event_id=EVENT_ID&approval_status=approved&pagination_cursor=CURSOR&pagination_limit=LIMIT",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "get-guests"],
                                "query": [
                                    {
                                        "key": "event_id",
                                        "value": "EVENT_ID"
                                    },
                                    {
                                        "key": "approval_status",
                                        "value": "approved"
                                    },
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "LIMIT"
                                    }
                                ]
                            },
                            "description": "# Get Guests\n\nRetrieve a list of guests who have registered for or been invited to a specific event.\n\n## HTTP Request\n```http\nGET https://public-api.luma.com/v1/event/get-guests?event_id={event_id}&approval_status={approval_status}&pagination_cursor={pagination_cursor}&pagination_limit={pagination_limit}\n```\n\n## Query Parameters\n\n| Name              | Type   | Required | Description                                                                                  |\n|-------------------|--------|----------|----------------------------------------------------------------------------------------------|\n| event_id          | string | Yes      | Event ID (usually starts with `evt-`).                                                       |\n| approval_status   | string | No       | Filter by approval status. Allowed: `approved`, `session`, `pending_approval`, `invited`, `declined`, `waitlist`. |\n| pagination_cursor | string | No       | Cursor for pagination (`next_cursor` from a previous response).                              |\n| pagination_limit  | number | No       | Number of guests to return (server-enforced maximum).                                       |\n\n## Response\n\n- **200**: Successful response containing a list of guests and pagination metadata.\n\n## Authorization\n\nInclude a valid Bearer token in the `Authorization` header:\n\n```bash\n-H \"Authorization: Bearer YOUR_API_KEY\"\n```"
                        },
                        "response": [],
                        "uid": "21505573-80b2b768-1f26-4779-8f28-3000b11db611"
                    },
                    {
                        "name": "Update Event",
                        "id": "7cf22bb7-3e05-42ec-80d5-ab193c496289",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"can_register_for_multiple_tickets\": true,\n    \"cover_url\": \"https://cdn.luma.com/uploads/event-cover.jpg\",\n    \"coordinate\": { \"latitude\": 37.7749, \"longitude\": -122.4194 },\n    \"description_md\": \"# Updated Event Description\\nDetails in **Markdown**.\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/update",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "update"]
                            },
                            "description": "## Update Event\n\nUpdate properties of an existing event, such as its cover image, location, registration settings, and description.\n\n**Endpoint**\n\n```\nPOST https://public-api.luma.com/v1/event/update\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                                  |\n|----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.        |\n| Content-Type   | string | Yes      | `application/json`.\n\n**JSON Body Parameters**\n\n| Name                          | Type     | Required | Description                                                                     |\n|-------------------------------|----------|----------|---------------------------------------------------------------------------------|\n| event_api_id                  | string   | Yes      | The API ID of the event to update.                                              |\n| can_register_for_multiple_tickets | boolean  | No       | Allow guests to register for multiple tickets when `true`.                      |\n| cover_url                     | uri      | No       | URL of the event cover image uploaded to the Luma CDN.                          |\n| coordinate                    | object   | No       | Location coordinates for the event (e.g., `{ latitude, longitude }`).           |\n| description_md                | string   | No       | Event description in Spark Markdown format.                                     |\n\n**Response**\n\n- 200: Successful response returning the updated event object.\n\n> Note: Additional updateable fields may exist; consult the full API specification for all available parameters."
                        },
                        "response": [],
                        "uid": "21505573-7cf22bb7-3e05-42ec-80d5-ab193c496289"
                    },
                    {
                        "name": "Update Event",
                        "id": "f86a5c08-8a02-4673-93d1-b6661ecc8749",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_id\": \"evt-12345\",                          \n    \"can_register_for_multiple_tickets\": true,\n    \"cover_url\": \"https://cdn.luma.com/example.jpg\",\n    \"coordinate\": { \"latitude\": 40.7128, \"longitude\": -74.0060 },\n    \"description_md\": \"# Updated Title\\nUpdated event description.\",\n    \"end_at\": \"2022-10-20T05:00:00Z\",\n    \"geo_address_json\": { /* object with address fields */ },\n    \"max_capacity\": 100,\n    \"meeting_url\": \"https://meet.example.com/event\",\n    \"show_guest_list\": false,\n    \"slug\": \"updated-event-slug\",\n    \"start_at\": \"2022-10-19T03:27:13.673Z\",\n    \"timezone\": \"America/New_York\",\n    \"tint_color\": \"#bb2dc7\",\n    \"visibility\": \"public\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/update",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "update"]
                            },
                            "description": "# Update Event\n\nUpdate an existing event that you manage. Only parameters included in the request body will be modified.\n\n## HTTP Request\n\n```http\nPOST https://public-api.luma.com/v1/event/update\nContent-Type: application/json\nAuthorization: Bearer YOUR_API_KEY\n```\n\n## Body Parameters\n\n| Name                             | Type      | Required | Description                                                                                             |\n|----------------------------------|-----------|----------|---------------------------------------------------------------------------------------------------------|\n| event_id                         | string    | Yes      | **Assumed.** ID of the event to update. Not shown in screenshot; verify actual parameter name.           |\n| can_register_for_multiple_tickets | boolean   | No       | Allow attendees to register for multiple ticket types.                                                  |\n| cover_url                        | uri       | No       | URL of the event cover image on the Luma CDN.                                                           |\n| coordinate                       | object    | No       | Location coordinates, e.g., `{ latitude: number, longitude: number }`.                                  |\n| description_md                   | string    | No       | Event description in Markdown; converted to Spark format internally.                                     |\n| end_at                           | date-time | No       | Event end time in ISO 8601 format, e.g., `2022-10-19T03:27:13.673Z`.                                    |\n| geo_address_json                 | object    | No       | Structured address object. Specific fields not detailed in screenshot.                                   |\n| max_capacity                     | integer   | No       | Maximum number of attendees before the event is marked sold out.                                        |\n| meeting_url                      | string    | No       | URL for a virtual meeting associated with the event.                                                    |\n| show_guest_list                  | boolean   | No       | When `true`, approved guests can see who else is attending.                                             |\n| slug                             | string    | No       | URL slug for the event (3–50 characters). Must be unique; unavailable slugs will cause failure.         |\n| start_at                         | date-time | Yes      | **Required.** Event start time in ISO 8601 format, e.g., `2022-10-19T03:27:13.673Z`.                    |\n| timezone                         | string    | Yes      | **Required.** IANA timezone for the event, e.g., `America/New_York`.                                    |\n| tint_color                       | string    | No       | Hex color for event accent, e.g., `#bb2dc7` (no alpha).                                                  |\n| visibility                       | string    | No       | Event visibility. Allowed: `public`, `members-only`, `private`.                                          |\n\n> **Note:** The screenshot did not show an explicit parameter for identifying the event (e.g., `event_id`). It is included here as an assumption and should be verified against the full API reference.\n\n## Response\n\n- **200**: Successful response with the updated event object.\n\n## Authorization\n\nInclude a valid Bearer token in the `Authorization` header:\n\n```bash\n-H \"Authorization: Bearer YOUR_API_KEY\"\n```"
                        },
                        "response": [],
                        "uid": "21505573-f86a5c08-8a02-4673-93d1-b6661ecc8749"
                    },
                    {
                        "name": "Update Event",
                        "id": "fe0a233c-0cec-4cc2-8440-4cc7a533b5c5",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_id\": \"evt-12345\",\n    \"meeting_url\": \"{{vault:zoom-meeting-link}}\",\n    \"name\": \"My Updated Event\",\n    \"name_requirement\": \"first-last\",\n    \"phone_number_requirement\": null,\n    \"registration_questions\": [\n      { \"question\": \"Do you have any dietary restrictions?\", \"required\": true }\n    ],\n    \"reminders_disabled\": false,\n    \"show_guest_list\": true\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/update",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "update"]
                            },
                            "description": "# Update Event\n\nUpdate properties of an existing event. You must supply the `event_id` and any fields you wish to change.\n\n## HTTP Request\n\n```http\nPOST https://public-api.luma.com/v1/event/update\nContent-Type: application/json\nAuthorization: Bearer YOUR_API_KEY\n```\n\n## Body Parameters\n\n| Name                     | Type     | Required | Description                                                                                             |\n|--------------------------|----------|----------|---------------------------------------------------------------------------------------------------------|\n| event_id                 | string   | Yes      | The ID of the event to update (usually starts with `evt-`).                                              |\n| meeting_url              | string   | No       | URL for the event’s virtual meeting (e.g., a Zoom link).                                                |\n| name                     | string   | No       | The event’s name.                                                                                        |\n| name_requirement         | string   | No       | Defines how guests enter their name. Allowed: `full-name`, `first-last`.                                 |\n| phone_number_requirement | string   | No       | Phone number requirement setting, or `null` to disable phone number collection.                          |\n| registration_questions   | array    | No       | Array of custom registration questions (each with `question` and `required` properties).                |\n| reminders_disabled       | boolean  | No       | Set to `true` to disable automated event reminders.                                                     |\n| show_guest_list          | boolean  | No       | When `true`, approved guests can view the guest list for the event.                                      |\n\n> **Note:** Additional updateable fields (e.g., `start_at`, `slug`, `visibility`, etc.) are supported but not shown in the screenshot. Please refer to the full API reference for all available parameters."
                        },
                        "response": [],
                        "uid": "21505573-fe0a233c-0cec-4cc2-8440-4cc7a533b5c5"
                    },
                    {
                        "name": "Update Event",
                        "id": "cb837319-5b59-4e92-a5a1-4bdcf695a8ec",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"can_register_for_multiple_tickets\": true,\n    \"cover_url\": \"https://cdn.luma.com/uploads/event-cover.jpg\",\n    \"coordinate\": { \"latitude\": 37.7749, \"longitude\": -122.4194 },\n    \"description_md\": \"# Updated Event Description\\nDetails in **Markdown**.\",\n    \"show_guest_list\": true,\n    \"slug\": \"aloha\",\n    \"start_at\": \"2022-10-19T03:27:13.673Z\",\n    \"timezone\": \"America/New_York\",\n    \"tint_color\": \"#bb2dc7\",\n    \"visibility\": \"public\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/update",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "update"]
                            },
                            "description": "## Update Event\n\nUpdate properties of an existing event, such as its registration settings, imagery, scheduling, and visibility.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/update\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                                |\n|-----------------|--------|----------|--------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.      |\n| Content-Type    | string | Yes      | `application/json`.                        |\n\n**JSON Body Parameters**\n\n| Name                                | Type             | Required | Description                                                                       |\n|-------------------------------------|------------------|----------|-----------------------------------------------------------------------------------|\n| event_api_id                        | string           | Yes      | The API ID of the event to update.                                                |\n| can_register_for_multiple_tickets  | boolean          | No       | Allow guests to register for multiple tickets when `true`.                        |\n| cover_url                           | uri              | No       | URL of the event cover image on the Luma CDN.                                     |\n| coordinate                          | object           | No       | Event location coordinates, e.g., `{ latitude, longitude }`.                      |\n| description_md                      | string           | No       | Event description in Spark Markdown format.                                       |\n| show_guest_list                     | boolean          | No       | When `true`, approved guests can see the event’s guest list.                      |\n| slug                                | string           | No       | URL slug (3–50 chars) used in `https://luma.com/{slug}`; must be unique.          |\n| start_at                            | date-time        | No       | Event start time in ISO 8601 format (UTC).                                       |\n| timezone                            | string           | No       | IANA timezone identifier (e.g., `America/New_York`).                             |\n| tint_color                          | string           | No       | Hex color for event accent (no alpha), e.g., `#bb2dc7`.                           |\n| visibility                          | string (enum)    | No       | Event visibility. Allowed: `public`, `members-only`, `private`.                   |\n\n**Response**\n\n- 200: Successful response returning the updated event object.\n\n> Note: Additional updateable fields may exist; consult the full API specification for all available parameters."
                        },
                        "response": [],
                        "uid": "21505573-cb837319-5b59-4e92-a5a1-4bdcf695a8ec"
                    },
                    {
                        "name": "Update Event",
                        "id": "5f4b1529-4d67-4bc1-a812-7c8af94c411d",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "accept",
                                    "value": "application/json"
                                },
                                {
                                    "key": "content-type",
                                    "value": "application/json"
                                },
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_id\": \"evt-12345\",\n    \"meeting_url\": \"{{vault:zoom-meeting-link}}\",\n    \"name\": \"My Updated Event\",\n    \"name_requirement\": \"first-last\",\n    \"phone_number_requirement\": null,\n    \"registration_questions\": [\n      { \"question\": \"Do you have any dietary restrictions?\", \"required\": true }\n    ],\n    \"reminders_disabled\": false,\n    \"show_guest_list\": true\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/update",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "update"]
                            },
                            "description": "# Update Event\n\nUpdate properties of an existing event. You must supply the `event_id` and any fields you wish to change.\n\n## HTTP Request\n```http\nPOST https://public-api.luma.com/v1/event/update\nAccept: application/json\nContent-Type: application/json\nx-luma-api-key: YOUR_API_KEY\n```\n\n## Body Parameters\n\n| Name                     | Type     | Required | Description                                                                                             |\n|--------------------------|----------|----------|---------------------------------------------------------------------------------------------------------|\n| event_id                 | string   | Yes      | The ID of the event to update (usually starts with `evt-`).                                              |\n| meeting_url              | string   | No       | URL for the event’s virtual meeting (e.g., a Zoom link).                                                |\n| name                     | string   | No       | The event’s name.                                                                                        |\n| name_requirement         | string   | No       | Defines how guests enter their name. Allowed: `full-name`, `first-last`.                                 |\n| phone_number_requirement | string   | No       | Phone number requirement setting, or `null` to disable phone number collection.                          |\n| registration_questions   | array    | No       | Array of custom registration questions (each with `question` and `required` properties).                |\n| reminders_disabled       | boolean  | No       | Set to `true` to disable automated event reminders.                                                     |\n| show_guest_list          | boolean  | No       | When `true`, approved guests can view the guest list for the event.                                      |\n\n## Response\n- **200**: Successful response.\n\n*Validation:* Method, endpoint, and primary body parameters have been extracted and aligned with the cURL snippet. Additional updatable fields are noted in the full API reference if needed."
                        },
                        "response": [],
                        "uid": "21505573-5f4b1529-4d67-4bc1-a812-7c8af94c411d"
                    },
                    {
                        "name": "Update Guest Status",
                        "id": "208c468f-e9d8-4b36-89e2-1875f8935dbe",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Accept",
                                    "value": "application/json"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"guest\": { /* guest identifier object */ },\n    \"event_api_id\": \"evt_12345\",\n    \"status\": \"declined\",\n    \"should_refund\": true\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/update-guest-status",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "update-guest-status"]
                            },
                            "description": "## Update Guest Status\n\nUpdate the status of an event guest to reflect their attendance or invitation state, with an option to refund if declining a paid guest.\n\n**Endpoint**  \n```\nPOST https://public-api.luma.com/v1/event/update-guest-status\n```\n\n**Headers**  \n| Name           | Type   | Required | Description                           |\n| -------------- | ------ | -------- | ------------------------------------- |\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication. |\n| Accept         | string | Yes      | `application/json`.                   |\n| Content-Type   | string | Yes      | `application/json`.                   |\n\n**Body Parameters**  \n| Name           | Type               | Required | Description                                                                                                      |\n| -------------- | ------------------ | -------- | ---------------------------------------------------------------------------------------------------------------- |\n| guest          | object             | Yes      | Object identifying the guest (e.g., `{ id: 'gst_67890' }`, `{ ticket_key: 'KEY123' }`, or `{ email: 'user@example.com' }`). |\n| event_api_id   | string             | Yes      | The API ID of the event containing the guest (e.g., `evt_12345`).                                               |\n| status         | string (enum)      | Yes      | New status for the guest. Allowed: `declined`, `approved`.                                                       |\n| should_refund  | boolean            | No       | If declining a paid guest, set to `true` to issue a refund.                                                     |\n\n**Response**  \n- 200: Successful response returns the updated guest object or a confirmation message."
                        },
                        "response": [],
                        "uid": "21505573-208c468f-e9d8-4b36-89e2-1875f8935dbe"
                    },
                    {
                        "name": "Create Event",
                        "id": "b6c30473-04c7-464d-8ec3-f26331c7a7a5",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "Authorization",
                                    "value": "Bearer YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"can_register_for_multiple_tickets\": false,\n    \"cover_url\": \"https://cdn.luma.com/example.jpg\",\n    \"coordinate\": { \"latitude\": 40.7128, \"longitude\": -74.0060 },\n    \"description_md\": \"# Event Title\\nEvent description in Markdown.\",\n    \"show_guest_list\": true,\n    \"slug\": \"my-event-slug\",\n    \"start_at\": \"2022-10-19T03:27:13.673Z\",\n    \"timezone\": \"America/New_York\",\n    \"tint_color\": \"#bb2dc7\",\n    \"visibility\": \"public\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/create",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "create"]
                            },
                            "description": "# Create Event\n\nCreate a new event under your account. Authentication via an API key is required.\n\n## HTTP Request\n\n```http\nPOST https://public-api.luma.com/v1/event/create\nContent-Type: application/json\nAuthorization: Bearer YOUR_API_KEY\n```\n\n## Body Parameters\n\n| Name                             | Type       | Required | Description                                                                                   |\n|----------------------------------|------------|----------|-----------------------------------------------------------------------------------------------|\n| can_register_for_multiple_tickets | boolean    | No       | Allow attendees to register for multiple ticket types.                                        |\n| cover_url                        | uri        | No       | URL of an image uploaded to the Luma CDN.                                                     |\n| coordinate                       | object     | No       | Location coordinates (e.g., `{ latitude, longitude }`).                                       |\n| description_md                   | string     | No       | Event description in Markdown; converted to Spark format internally.                          |\n| show_guest_list                  | boolean    | No       | Show guest list to approved guests.                                                           |\n| slug                             | string     | No       | URL slug for the event (3–50 characters); must be unique.                                     |\n| start_at                         | date-time  | Yes      | Event start time in ISO 8601 format (e.g., `2022-10-19T03:27:13.673Z`).                      |\n| timezone                         | string     | Yes      | IANA timezone for the event (e.g., `America/New_York`).                                       |\n| tint_color                       | string     | No       | Hex color for event accent (no alpha), e.g., `#bb2dc7`.                                      |\n| visibility                       | string     | No       | Event visibility: `public`, `members-only`, or `private`.                                      |\n\n## Response\n\n- **200**: Successful response with created event details.\n\n*Validation*: Method, endpoint, and all visible parameters have been captured; required and optional statuses are clearly marked, and assumptions (e.g., coordinate structure) are noted for verification."
                        },
                        "response": [],
                        "uid": "21505573-b6c30473-04c7-464d-8ec3-f26331c7a7a5"
                    },
                    {
                        "name": "Send Invites",
                        "id": "8ef9e1f2-e9e2-4ff6-8feb-f02efe6027aa",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"guests\": [\n      { \"email\": \"guest1@example.com\", \"name\": \"Guest One\" },\n      { \"email\": \"guest2@example.com\", \"phone_number\": \"+15551234567\" }\n    ],\n    \"message\": \"Looking forward to seeing you at the event!\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/send-invites",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "send-invites"]
                            },
                            "description": "## Send Invites\n\nSend an invite to one or more guests for an event. Invites are delivered via email and, if a guest’s phone number is linked to their Luma account, via SMS as well.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/send-invites\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                                  |\n|----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.        |\n| Content-Type   | string | Yes      | `application/json`.                          |\n\n**JSON Body Parameters**\n\n| Name           | Type               | Required | Description                                                                                     |\n|----------------|--------------------|----------|-------------------------------------------------------------------------------------------------|\n| event_api_id   | string             | Yes      | The API ID of the event to send invites for.                                                   |\n| guests         | array of objects   | Yes      | List of guests to invite. Objects may include identifiers like `email`, `phone_number`, and `name`. |\n| message        | string             | No       | Personal message to include in the invite (max 200 characters).                                 |\n\n**Response**\n\n- 200: Successful response confirming that invites have been sent."
                        },
                        "response": [],
                        "uid": "21505573-8ef9e1f2-e9e2-4ff6-8feb-f02efe6027aa"
                    },
                    {
                        "name": "Send Invites",
                        "id": "0a0cf39c-b427-44bf-9d61-4d0cb79a47de",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"guests\": [\n      { \"id\": \"gst_67890\" }\n    ],\n    \"message\": \"We’d love to see you at our event!\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/send-invites",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "send-invites"]
                            },
                            "description": "## Send Invites\n\nSend an invite to one or more guests for a specified event. Invites are sent via email, and if a guest’s phone number is linked to their Luma account, they will also receive an SMS.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/send-invites\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                                  |\n|----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.        |\n| Content-Type   | string | Yes      | `application/json`                           |\n\n**Body Parameters**\n\n| Name           | Type                | Required | Description                                                                                  |\n|----------------|---------------------|----------|----------------------------------------------------------------------------------------------|\n| event_api_id   | string              | Yes      | The API ID of the event (e.g., `evt_12345`).                                               |\n| guests         | array of objects    | Yes      | Array of guest identifier objects (e.g., `{ id: \"gst_67890\" }`, `{ email: \"user@ex.com\" }`). |\n| message        | string              | No       | Custom message for the invite (max 200 characters).                                         |\n\n**Response**\n\n- 200: Successful response confirming invites were sent."
                        },
                        "response": [],
                        "uid": "21505573-0a0cf39c-b427-44bf-9d61-4d0cb79a47de"
                    },
                    {
                        "name": "Add Guests",
                        "id": "70ca0219-ea0e-492b-81cf-e94d63a086a2",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"guests\": [\n      { \"email\": \"guest1@example.com\", \"name\": \"Guest One\" },\n      { \"email\": \"guest2@example.com\", \"name\": \"Guest Two\" }\n    ]\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/add-guests",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "add-guests"]
                            },
                            "description": "## Add Guests\n\nAdd one or more guests to an existing event. Invited guests are automatically marked as \"Going\".\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/add-guests\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                                  |\n|----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.        |\n| Content-Type   | string | Yes      | `application/json`.                          |\n\n**JSON Body Parameters**\n\n| Name          | Type              | Required | Description                                                                                       |\n|---------------|-------------------|----------|---------------------------------------------------------------------------------------------------|\n| event_api_id  | string            | Yes      | The API ID of the event to which guests will be added.                                           |\n| guests        | array of objects  | Yes      | Array of guest objects to add. Each may include `email`, `name`, and/or `id` to identify a guest. |\n\n**Response**\n\n- 200: Successful response confirming guests have been added."
                        },
                        "response": [],
                        "uid": "21505573-70ca0219-ea0e-492b-81cf-e94d63a086a2"
                    },
                    {
                        "name": "Add Guests",
                        "id": "21a553f8-c47a-48da-a410-dbe698d316e0",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"guests\": [\n      { \"email\": \"user@example.com\", \"name\": \"John Doe\" }\n    ]\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/add-guests",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "add-guests"]
                            },
                            "description": "## Add Guests\n\nAdd one or more guests to an event. New guests are added with the status **Going**.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/add-guests\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                              |\n|----------------|--------|----------|------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.    |\n| Content-Type   | string | Yes      | `application/json`                       |\n\n**JSON Body Parameters**\n\n| Name           | Type               | Required | Description                                                                                   |\n|----------------|--------------------|----------|-----------------------------------------------------------------------------------------------|\n| event_api_id   | string             | Yes      | The API ID of the event (e.g., `evt_12345`).                                                 |\n| guests         | array of objects   | Yes      | Array of guest objects to add. Each object may include `email`, `name`, etc. New guests are set to “Going”. |\n\n**Response**\n\n- 200: Successful response returning the added guest objects or confirmation."
                        },
                        "response": [],
                        "uid": "21505573-21a553f8-c47a-48da-a410-dbe698d316e0"
                    },
                    {
                        "name": "Add Host",
                        "id": "24ff7051-577f-459f-9b11-2799cceceead",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"email\": \"host@example.com\",\n    \"access_level\": \"manager\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/add-host",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "add-host"]
                            },
                            "description": "## Add Host\n\nAdd a host to an existing event. If the user already has a Luma profile, their existing profile will be retained and not overwritten.\n\n**Endpoint**\n\n```\nPOST https://public-api.luma.com/v1/event/add-host\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                               |\n|-----------------|--------|----------|-------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.     |\n| Content-Type    | string | Yes      | `application/json`                        |\n\n**JSON Body Parameters**\n\n| Name          | Type    | Required | Description                                                    |\n|---------------|---------|----------|----------------------------------------------------------------|\n| event_api_id  | string  | Yes      | The API ID of the event to which the host will be added.       |\n| email         | string  | Yes      | Email address of the host being added.                         |\n| access_level  | string  | No       | Access level granted to the host; defaults to `manager`.       |\n\n**Response**\n\n- 200: Successful response confirming the host has been added."
                        },
                        "response": [],
                        "uid": "21505573-24ff7051-577f-459f-9b11-2799cceceead"
                    },
                    {
                        "name": "Add Host",
                        "id": "752b5aae-bb43-48b0-ae33-709ed9b7079f",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"email\": \"host@example.com\",\n    \"access_level\": \"manager\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/add-host",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "add-host"]
                            },
                            "description": "## Add Host\n\nAdd a host to an event. If the user already has a Luma profile, their role will be applied or ignored accordingly.\n\n**Endpoint**\n\n```\nPOST https://public-api.luma.com/v1/event/add-host\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                              |\n|-----------------|--------|----------|------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.    |\n| Content-Type    | string | Yes      | `application/json`                       |\n\n**Body Parameters**\n\n| Name           | Type     | Required | Description                                                                                   |\n|----------------|----------|----------|-----------------------------------------------------------------------------------------------|\n| event_api_id   | string   | Yes      | The API ID of the event (e.g., `evt_12345`).                                                 |\n| email          | string   | Yes      | Email address of the host being added.                                                       |\n| access_level   | string   | No       | Host access level for the event; defaults to `manager` if omitted.                            |\n\n**Response**\n\n- 200: Successful response returning the added host object or confirmation."
                        },
                        "response": [],
                        "uid": "21505573-752b5aae-bb43-48b0-ae33-709ed9b7079f"
                    },
                    {
                        "name": "Create Coupon",
                        "id": "f6fa7132-a586-4e21-bdb7-1898d1fdb38a",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"code\": \"DISCOUNT20\",\n    \"remaining_count\": 100,\n    \"valid_start_at\": \"2023-01-01T00:00:00Z\",\n    \"valid_until\": \"2023-12-31T23:59:59Z\",\n    \"discount_type\": \"percent\",\n    \"discount_value\": 20,\n    \"applies_to\": []\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/create-coupon",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "create-coupon"]
                            },
                            "description": "# Create Coupon\n\nCreate a coupon that guests can apply when registering for an event. Coupons cannot be modified after creation.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/create-coupon\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                                |\n|----------------|--------|----------|--------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.      |\n| Content-Type   | string | Yes      | `application/json`.                        |\n\n**JSON Body Parameters**\n\n| Name             | Type                   | Required | Description                                                                                  |\n|------------------|------------------------|----------|----------------------------------------------------------------------------------------------|\n| event_api_id     | string                 | Yes      | The API ID of the event for which to create the coupon.                                      |\n| code             | string                 | Yes      | Coupon code (1–20 chars), not case sensitive.                                               |\n| remaining_count  | integer                | No       | Number of uses allowed (0–1,000,000; set to 1,000,000 for unlimited).                        |\n| valid_start_at   | string (date-time)     | No       | ISO 8601 datetime when the coupon becomes valid (UTC).                                       |\n| valid_until      | string (date-time)     | No       | ISO 8601 datetime when the coupon expires (UTC).                                            |\n| discount_type    | string (enum)          | Yes      | Discount type. Allowed: `amount`, `percent`.                                                |\n| discount_value   | number                 | Yes      | Discount amount (currency units or percentage based on `discount_type`).                      |\n| applies_to       | array                  | No       | List of ticket or item IDs the coupon applies to; empty applies to all.                       |\n\n**Response**\n\n- 200: Successful response returns the created coupon object, including its `id`, `code`, and settings.\n\n> Note: Once created, coupon settings (code, type, value, validity) cannot be changed. Contact support for adjustments."
                        },
                        "response": [],
                        "uid": "21505573-f6fa7132-a586-4e21-bdb7-1898d1fdb38a"
                    },
                    {
                        "name": "Create Coupon",
                        "id": "b6ff5006-ee3c-44a3-8280-d930aa83486b",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"code\": \"SUMMER2025\",\n    \"remaining_count\": 100,\n    \"valid_start_at\": \"2023-07-01T00:00:00Z\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/create-coupon",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "create-coupon"]
                            },
                            "description": "## Create Coupon\n\nCreate a coupon that can be applied when a guest is registering for an event. Once created, coupon terms (code, validity, usage limits) cannot be edited.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/create-coupon\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                              |\n|-----------------|--------|----------|------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.    |\n| Content-Type    | string | Yes      | `application/json`.                      |\n\n**JSON Body Parameters**\n\n| Name            | Type    | Required | Description                                                        |\n|-----------------|---------|----------|--------------------------------------------------------------------|\n| code            | string  | Yes      | Coupon code guests will enter (1–20 chars, not case sensitive).    |\n| remaining_count | integer | Yes      | Number of times the coupon can be used (0–1,000,000).             |\n| valid_start_at  | string  | No       | ISO 8601 date-time when the coupon becomes active.               |\n\n**Response**\n\n- 200: Successful response returning the created coupon object, including its ID and properties.\n\n> Note: Additional fields (e.g., `valid_until`, `discount_amount`, `event_api_id`) may be available but were not shown in the provided screenshot."
                        },
                        "response": [],
                        "uid": "21505573-b6ff5006-ee3c-44a3-8280-d930aa83486b"
                    },
                    {
                        "name": "Create Coupon",
                        "id": "03ae48de-b5fd-4d2d-89d6-9a6ce80b76fe",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"code\": \"SUMMER2025\",\n    \"remaining_count\": 100,\n    \"valid_start_at\": \"2025-06-01T00:00:00Z\",\n    \"valid_end_at\": \"2025-08-31T23:59:59Z\",\n    \"discount_type\": \"percent\",\n    \"percent_off\": 20\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/create-coupon",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "create-coupon"]
                            },
                            "description": "## Create Coupon\n\nCreate a coupon that guests can apply during registration for a specific event. Coupons cannot be modified after creation.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/create-coupon\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                             |\n|-----------------|--------|----------|-----------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.   |\n| Content-Type    | string | Yes      | `application/json`                      |\n\n**JSON Body Parameters**\n\n| Name             | Type               | Required | Description                                                                           |\n|------------------|--------------------|----------|---------------------------------------------------------------------------------------|\n| event_api_id     | string             | Yes      | The ID of the event to attach the coupon to.                                         |\n| code             | string             | Yes      | Coupon code guests enter (1–20 chars, case insensitive).                             |\n| remaining_count  | integer            | Yes      | Number of uses remaining. Set `1000000` for unlimited uses.                          |\n| valid_start_at   | date-time          | No       | Start of coupon validity (ISO 8601 UTC).                                             |\n| valid_end_at     | date-time          | No       | End of coupon validity (ISO 8601 UTC). Must be after `valid_start_at`.                |\n| discount_type    | string (enum)      | Yes      | `percent` or `fixed` to specify discount method.                                     |\n| percent_off      | number             | No       | Percentage off (0–100) when `discount_type` is `percent`.                            |\n| amount_off       | integer            | No       | Fixed amount off in cents when `discount_type` is `fixed`.                           |\n\n**Response**\n\n- 200: Successful response returning the newly created coupon object, including its `id`, `code`, and other properties."
                        },
                        "response": [],
                        "uid": "21505573-03ae48de-b5fd-4d2d-89d6-9a6ce80b76fe"
                    },
                    {
                        "name": "Create Ticket Type",
                        "id": "51a6ee82-dace-4e63-8773-36715d0fd292",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"name\": \"VIP Ticket\",\n    \"require_approval\": false,\n    \"is_hidden\": false,\n    \"description\": \"Access to VIP lounge\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/ticket-types/create",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "ticket-types", "create"]
                            },
                            "description": "## Create Ticket Type\n\nCreate a new ticket type for an event with optional approval and visibility settings.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/ticket-types/create\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                                  |\n|-----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.        |\n| Content-Type    | string | Yes      | `application/json`.                           |\n\n**JSON Body Parameters**\n\n| Name             | Type     | Required | Description                                                                     |\n|------------------|----------|----------|---------------------------------------------------------------------------------|\n| event_api_id     | string   | Yes      | Event API ID (e.g., `evt-123`).                                                  |\n| name             | string   | Yes      | Name of the ticket type.                                                         |\n| require_approval | boolean  | No       | If `true`, guests require approval before purchasing this ticket.                 |\n| is_hidden        | boolean  | No       | If `true`, the ticket type is hidden from general purchase listings.            |\n| description      | string   | No       | Description of the ticket type.                                                 |\n\n**Response**\n\n- 200: Successful response returning the created ticket type object, including its ID and properties."
                        },
                        "response": [],
                        "uid": "21505573-51a6ee82-dace-4e63-8773-36715d0fd292"
                    },
                    {
                        "name": "Update Ticket Type",
                        "id": "4d859d09-7659-45dd-a0f5-c3647c630afc",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\",\n    \"name\": \"VIP Admission\",\n    \"require_approval\": false,\n    \"is_hidden\": false,\n    \"description\": \"Access to VIP lounge and complimentary drinks.\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/ticket-types/update",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "ticket-types", "update"]
                            },
                            "description": "## Update Ticket Type\n\nUpdate the properties of an existing ticket type for an event, such as its name, visibility, approval requirements, and description.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/ticket-types/update\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                             |\n|----------------|--------|----------|-----------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.   |\n| Content-Type   | string | Yes      | `application/json`.                     |\n\n**JSON Body Parameters**\n\n| Name               | Type     | Required | Description                                                                                      |\n|--------------------|----------|----------|--------------------------------------------------------------------------------------------------|\n| event_api_id       | string   | Yes      | API ID of the event (e.g., `evt_123`).                                                          |\n| name               | string   | Yes      | Name of the ticket type.                                                                        |\n| require_approval   | boolean  | No       | Whether registration for this ticket needs approval.                                            |\n| is_hidden          | boolean  | No       | Hide this ticket type from public listings.                                                     |\n| description        | string   | No       | Description displayed during guest registration.                                                |\n\n**Response**\n\n- 200: Successful response returns the updated ticket type object."
                        },
                        "response": [],
                        "uid": "21505573-4d859d09-7659-45dd-a0f5-c3647c630afc"
                    },
                    {
                        "name": "Update Ticket Type",
                        "id": "6a877bcf-59a2-4f43-abfd-d2b75e8eb64f",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_ticket_type_api_id\": \"ett_12345\",\n    \"name\": \"VIP Ticket\",\n    \"require_approval\": false,\n    \"is_hidden\": false,\n    \"description\": \"Access to VIP lounge and benefits\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/ticket-types/update",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "ticket-types", "update"]
                            },
                            "description": "## Update Ticket Type\n\nUpdate the configuration of an existing ticket type for an event.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/ticket-types/update\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                                  |\n|-----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.        |\n| Content-Type    | string | Yes      | `application/json`.                          |\n\n**JSON Body Parameters**\n\n| Name                     | Type    | Required | Description                                                             |\n|--------------------------|---------|----------|-------------------------------------------------------------------------|\n| event_ticket_type_api_id | string  | Yes      | The API ID of the ticket type to update (e.g., `ett-123`).              |\n| name                     | string  | No       | Name of the ticket type.                                                |\n| require_approval         | boolean | No       | Guests require approval before purchasing when `true`.                  |\n| is_hidden                | boolean | No       | Hide the ticket type from public listings when `true`.                  |\n| description              | string  | No       | Description of the ticket type.                                         |\n\n**Response**\n\n- 200: Successful response returning the updated ticket type object."
                        },
                        "response": [],
                        "uid": "21505573-6a877bcf-59a2-4f43-abfd-d2b75e8eb64f"
                    },
                    {
                        "name": "Delete Ticket Type",
                        "id": "cd2cbfd4-79b4-46c9-827f-a38b1055e3ce",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_ticket_type_api_id\": \"ett_12345\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/ticket-types/delete",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "ticket-types", "delete"]
                            },
                            "description": "## Delete Ticket Type\n\nRemove an existing ticket type from an event. Once deleted, the ticket type configuration is permanently removed and cannot be recovered.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/ticket-types/delete\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                              |\n|----------------|--------|----------|------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.    |\n| Content-Type   | string | Yes      | `application/json`.                      |\n\n**JSON Body Parameters**\n\n| Name                         | Type   | Required | Description                                                     |\n|------------------------------|--------|----------|-----------------------------------------------------------------||\n| event_ticket_type_api_id     | string | Yes      | The API ID of the ticket type to delete (e.g., `ett_12345`).    |\n\n**Response**\n\n- 200: Successful response confirming deletion of the ticket type."
                        },
                        "response": [],
                        "uid": "21505573-cd2cbfd4-79b4-46c9-827f-a38b1055e3ce"
                    },
                    {
                        "name": "Delete Ticket Type",
                        "id": "8a4ce39e-4e54-426d-98b1-d6e680cbed4d",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_ticket_type_api_id\": \"TYPE_ID\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/event/ticket-types/delete",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "event", "ticket-types", "delete"]
                            },
                            "description": "## Delete Ticket Type\n\nSoft delete a ticket type. This endpoint cannot delete a ticket type if tickets have already been sold or if it's the last visible ticket type for the event. Once deleted, the ticket type remains in the system but is no longer available for new registrations.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/event/ticket-types/delete\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                           |\n|-----------------|--------|----------|---------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication. |\n| Content-Type    | string | Yes      | `application/json`.                   |\n\n**JSON Body Parameters**\n\n| Name                       | Type   | Required | Description                                         |\n|----------------------------|--------|----------|-----------------------------------------------------|\n| event_ticket_type_api_id   | string | Yes      | The API ID of the event ticket type to delete.      |\n\n**Response**\n- 200: Successful response confirming the ticket type has been soft deleted."
                        },
                        "response": [],
                        "uid": "21505573-8a4ce39e-4e54-426d-98b1-d6e680cbed4d"
                    }
                ],
                "id": "1c8a78c7-cee7-411d-bccb-01bd91638e25",
                "uid": "21505573-1c8a78c7-cee7-411d-bccb-01bd91638e25"
            },
            {
                "name": "Calendars",
                "item": [
                    {
                        "name": "List Events",
                        "id": "d10ade93-2643-4027-95ae-32a175464c60",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/events?calendar_id=CALENDAR_ID&pagination_cursor=CURSOR&pagination_limit=20",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "events"],
                                "query": [
                                    {
                                        "key": "calendar_id",
                                        "value": "CALENDAR_ID"
                                    },
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "20"
                                    }
                                ]
                            },
                            "description": "## List Events\n\nList all events associated with a specific calendar, with optional pagination controls.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/calendar/events\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                              |\n|-----------------|--------|----------|------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.    |\n\n**Query Parameters**\n\n| Name              | Type     | Required | Description                                                                     |\n|-------------------|----------|----------|---------------------------------------------------------------------------------|\n| calendar_id       | string   | Yes      | The ID of the calendar to list events for.                                      |\n| pagination_cursor | string   | No       | Cursor value from a previous response to fetch the next page of results.        |\n| pagination_limit  | number   | No       | Number of events to return (server may enforce a maximum limit).               |\n\n**Response**\n\n- 200: Successful response returning a paginated list of calendar events."
                        },
                        "response": [],
                        "uid": "21505573-d10ade93-2643-4027-95ae-32a175464c60"
                    },
                    {
                        "name": "List Events",
                        "id": "ec1902ad-2e73-4419-978e-d4b54ae9af25",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/list-events?before=2022-10-19T03:27:13.673Z&after=2022-10-01T00:00:00Z&pagination_cursor=CURSOR&pagination_limit=50",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "list-events"],
                                "query": [
                                    {
                                        "key": "before",
                                        "value": "2022-10-19T03:27:13.673Z"
                                    },
                                    {
                                        "key": "after",
                                        "value": "2022-10-01T00:00:00Z"
                                    },
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "50"
                                    }
                                ]
                            },
                            "description": "## List Events\n\nEvery event and API key on Luma is managed by a Luma Calendar. Use this route to list all of the events managed by your Calendar.  \n> Note: This route will not list events that are listed on the Calendar but not managed by it.\n\n**Endpoint**  \n```\nGET https://public-api.luma.com/v1/calendar/list-events\n```\n\n**Headers**  \n| Name            | Type   | Required | Description                                  |\n|-----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.        |\n\n**Query Parameters**  \n| Name               | Type       | Required | Description                                                                                  |\n|--------------------|------------|----------|----------------------------------------------------------------------------------------------|\n| before             | date-time  | No       | Return events starting before this ISO 8601 timestamp (UTC).                                 |\n| after              | date-time  | No       | Return events starting after this ISO 8601 timestamp (UTC).                                  |\n| pagination_cursor  | string     | No       | Cursor from previous response to fetch the next page.                                        |\n| pagination_limit   | number     | No       | Maximum number of events to return; server-enforced limit may apply.                        |\n\n**Response**  \n- 200: Successful response returning a paginated list of events."
                        },
                        "response": [],
                        "uid": "21505573-ec1902ad-2e73-4419-978e-d4b54ae9af25"
                    },
                    {
                        "name": "List Person Tags",
                        "id": "6599eb3b-a8ac-4be8-a393-21641feb563f",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/list-person-tags?before=2022-10-19T03:27:13.673Z&after=2022-10-01T00:00:00Z&pagination_cursor=CURSOR&pagination_limit=50",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "list-person-tags"],
                                "query": [
                                    {
                                        "key": "before",
                                        "value": "2022-10-19T03:27:13.673Z"
                                    },
                                    {
                                        "key": "after",
                                        "value": "2022-10-01T00:00:00Z"
                                    },
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "50"
                                    }
                                ]
                            },
                            "description": "## List Person Tags\n\nRetrieve a paginated list of tags applied to people within your calendar.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/calendar/list-person-tags\n```\n\n**Headers**\n| Name           | Type   | Required | Description                             |\n| -------------- | ------ | -------- | --------------------------------------- |\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.   |\n\n**Query Parameters**\n| Name              | Type      | Required | Description                                                                 |\n|-------------------|-----------|----------|-----------------------------------------------------------------------------|\n| before            | date-time | No       | ISO 8601 timestamp; return tags created before this time.                  |\n| after             | date-time | No       | ISO 8601 timestamp; return tags created after this time.                   |\n| pagination_cursor | string    | No       | Cursor value from a previous response to fetch the next page.              |\n| pagination_limit  | number    | No       | Number of items to return; server applies a maximum limit.                |\n\n**Response**\n- 200: Successful response returning a paginated list of person tag objects."
                        },
                        "response": [],
                        "uid": "21505573-6599eb3b-a8ac-4be8-a393-21641feb563f"
                    },
                    {
                        "name": "List Person Tags",
                        "id": "0c0ecc0e-dc59-4b03-9c16-d12d3b8d3fa8",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/list-person-tags?pagination_cursor=CURSOR&pagination_limit=50&sort_column=name&sort_direction=asc",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "list-person-tags"],
                                "query": [
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "50"
                                    },
                                    {
                                        "key": "sort_column",
                                        "value": "name"
                                    },
                                    {
                                        "key": "sort_direction",
                                        "value": "asc"
                                    }
                                ]
                            },
                            "description": "## List Person Tags\n\nRetrieve a paginated list of person tags associated with your calendar. Person tags can be used to categorize or filter guests.\n\n**Endpoint**  \n```\nGET https://public-api.luma.com/v1/calendar/list-person-tags\n```\n\n**Headers**  \n| Name           | Type   | Required | Description                                  |\n|----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.        |\n\n**Query Parameters**  \n| Name              | Type              | Required | Description                                                                                     |\n|-------------------|-------------------|----------|-------------------------------------------------------------------------------------------------|\n| pagination_cursor | string            | No       | Cursor from a previous response to retrieve the next page of results.                            |\n| pagination_limit  | number            | No       | Maximum number of tags to return; server-enforced limit may apply.                              |\n| sort_column       | string (enum)     | No       | Field to sort by. Allowed: `name`, `color`, `created_at`.                                       |\n| sort_direction    | string (enum)     | No       | Sort order. Allowed: `asc`, `desc`, `asc nulls last`, `desc nulls last`.                        |\n\n**Response**  \n- 200: Successful response returning a paginated list of person tag objects."
                        },
                        "response": [],
                        "uid": "21505573-0c0ecc0e-dc59-4b03-9c16-d12d3b8d3fa8"
                    },
                    {
                        "name": "Lookup Event",
                        "id": "56a01ab7-efcc-4bf2-912f-839ff08d6a94",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/lookup-event?event_api_id=EVT_ID",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "lookup-event"],
                                "query": [
                                    {
                                        "key": "event_api_id",
                                        "value": "EVT_ID"
                                    }
                                ]
                            },
                            "description": "## Lookup Event\n\nRetrieve a specific event managed by your calendar by its API ID or slug.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/calendar/lookup-event\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                               |\n|-----------------|--------|----------|-------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.     |\n\n**Query Parameters**\n\n| Name           | Type   | Required | Description                                                    |\n|----------------|--------|----------|----------------------------------------------------------------|\n| event_api_id   | string | Yes      | The API ID of the event to look up (e.g., `evt-12345`).         |\n| slug           | string | No       | The URL slug of the event (used if looking up by slug).        |\n\n**Response**\n\n- 200: Successful response returning the event object managed by your calendar.\n\n> Note: If both `event_api_id` and `slug` are provided, `event_api_id` takes precedence."
                        },
                        "response": [],
                        "uid": "21505573-56a01ab7-efcc-4bf2-912f-839ff08d6a94"
                    },
                    {
                        "name": "Lookup Event",
                        "id": "f281360b-2a87-4f50-9ad4-aec5f741bb16",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/lookup-event?platform=external&url=https%3A%2F%2Fevent.example.com%2Fpage&event_api_id=evt_12345",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "lookup-event"],
                                "query": [
                                    {
                                        "key": "platform",
                                        "value": "external"
                                    },
                                    {
                                        "key": "url",
                                        "value": "https%3A%2F%2Fevent.example.com%2Fpage"
                                    },
                                    {
                                        "key": "event_api_id",
                                        "value": "evt_12345"
                                    }
                                ]
                            },
                            "description": "## Lookup Event\n\nCheck if an event already exists on your Luma calendar. Useful to determine whether you need to submit a new event to the calendar.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/calendar/lookup-event\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                                 |\n|-----------------|--------|----------|---------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.       |\n\n**Query Parameters**\n\n| Name          | Type             | Required | Description                                                              |\n|---------------|------------------|----------|--------------------------------------------------------------------------|\n| platform      | string (enum)    | No       | Platform of origin. Allowed: `external`, `luma`.                         |\n| url           | string           | No       | URL of the event page to look up on the calendar.                       |\n| event_api_id  | string           | No       | Luma event API ID to check for existence (e.g., `evt_12345`).            |\n\n**Response**\n\n- 200: Successful response indicating whether the event exists and returning its calendar details if found."
                        },
                        "response": [],
                        "uid": "21505573-f281360b-2a87-4f50-9ad4-aec5f741bb16"
                    },
                    {
                        "name": "List People",
                        "id": "6aa105ed-f045-461d-8bfa-0dd27cac347b",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/list-people?platform=external&url=https%3A%2F%2Fcalendar.example.com%2Fevent&event_api_id=evt_12345&pagination_cursor=CURSOR&pagination_limit=50&sort_column=name&sort_direction=asc",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "list-people"],
                                "query": [
                                    {
                                        "key": "platform",
                                        "value": "external"
                                    },
                                    {
                                        "key": "url",
                                        "value": "https%3A%2F%2Fcalendar.example.com%2Fevent"
                                    },
                                    {
                                        "key": "event_api_id",
                                        "value": "evt_12345"
                                    },
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "50"
                                    },
                                    {
                                        "key": "sort_column",
                                        "value": "name"
                                    },
                                    {
                                        "key": "sort_direction",
                                        "value": "asc"
                                    }
                                ]
                            },
                            "description": "## List People\n\nRetrieve a paginated list of people associated with your Luma Calendar. Use query parameters to filter by platform, external URLs, or specific events, and to control pagination and sorting.\n\n**Endpoint**  \n```\nGET https://public-api.luma.com/v1/calendar/list-people\n```\n\n**Headers**  \n| Name            | Type   | Required | Description                             |\n|-----------------|--------|----------|-----------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.   |\n\n**Query Parameters**  \n| Name               | Type              | Required | Description                                                                                   |\n|--------------------|-------------------|----------|-----------------------------------------------------------------------------------------------|\n| platform           | string (enum)     | No       | Context for listing people. Allowed: `external`, `luma`.                                      |\n| url                | string            | No       | URL of the external calendar page when `platform=external`.                                  |\n| event_api_id       | string            | No       | API ID of the event to filter people (e.g., `evt_12345`).                                     |\n| pagination_cursor  | string            | No       | Cursor from previous response for next page of results.                                       |\n| pagination_limit   | number            | No       | Maximum number of people to return; server-enforced limit may apply.                         |\n| sort_column        | string (enum)     | No       | Field to sort by. Allowed: `name`, `email`, `created_at`, `last_registration`, `last_login`. |\n| sort_direction     | string (enum)     | No       | Sort order. Allowed: `asc`, `desc`, `asc nulls last`, `desc nulls last`.                     |\n\n**Response**  \n- 200: Successful response returning a paginated list of people."
                        },
                        "response": [],
                        "uid": "21505573-6aa105ed-f045-461d-8bfa-0dd27cac347b"
                    },
                    {
                        "name": "List People",
                        "id": "ca49a97e-7246-4cb1-ae0c-612693ecfd75",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/list-people?query=SEARCH_TERM&tags=TAG1,TAG2",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "list-people"],
                                "query": [
                                    {
                                        "key": "query",
                                        "value": "SEARCH_TERM"
                                    },
                                    {
                                        "key": "tags",
                                        "value": "TAG1,TAG2"
                                    }
                                ]
                            },
                            "description": "## List People\n\nRetrieve a list of people in your calendar, optionally filtered by a search term or tags.\n\n**Endpoint**  \n```\nGET https://public-api.luma.com/v1/calendar/list-people\n```\n\n**Headers**  \n| Name            | Type   | Required | Description                                  |\n|-----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.        |\n\n**Query Parameters**  \n| Name  | Type   | Required | Description                                              |\n|-------|--------|----------|----------------------------------------------------------|\n| query | string | No       | Search over names and emails.                            |\n| tags  | string | No       | Comma-separated list of tag names or IDs to filter people. Returns people who have any of the specified tags. |\n\n**Response**  \n- 200: Successful response returning an array of person objects matching the filters."
                        },
                        "response": [],
                        "uid": "21505573-ca49a97e-7246-4cb1-ae0c-612693ecfd75"
                    },
                    {
                        "name": "List Calendar Coupons",
                        "id": "ce0124a2-9702-4167-8cb2-61390f169696",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/coupons?pagination_cursor=CURSOR&pagination_limit=50",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "coupons"],
                                "query": [
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "50"
                                    }
                                ]
                            },
                            "description": "## List Calendar Coupons\n\nList all coupons created under your Luma Calendar. Coupons returned are subject to pagination controls.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/calendar/coupons\n```\n\n**Headers**\n| Name            | Type   | Required | Description                                  |\n|-----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.        |\n\n**Query Parameters**\n| Name              | Type   | Required | Description                                                            |\n|-------------------|--------|----------|------------------------------------------------------------------------|\n| pagination_cursor | string | No       | Cursor from a previous response to retrieve the next page of coupons. |\n| pagination_limit  | number | No       | Number of coupons to return; server-enforced maximum may apply.       |\n\n**Response**\n- 200: Successful response returning a paginated list of calendar coupon objects.\n\n> Note: Assumed parameters based on consistent pagination patterns; the screenshot did not display explicit query fields."
                        },
                        "response": [],
                        "uid": "21505573-ce0124a2-9702-4167-8cb2-61390f169696"
                    },
                    {
                        "name": "List Calendar Coupons",
                        "id": "809bc805-bd6d-41f4-bb5d-5e7d0156a6c2",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/coupons?pagination_cursor=CURSOR&pagination_limit=50",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "coupons"],
                                "query": [
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "50"
                                    }
                                ]
                            },
                            "description": "## List Calendar Coupons\n\nList all coupons that have been created for a calendar. These coupons can be applied by any guest registering for any event in the calendar.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/calendar/coupons\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                                  |\n|-----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.        |\n\n**Query Parameters**\n\n| Name              | Type   | Required | Description                                                     |\n|-------------------|--------|----------|-----------------------------------------------------------------|\n| pagination_cursor | string | No       | Cursor from a previous response to fetch the next page.         |\n| pagination_limit  | number | No       | Number of items to return; server may enforce an upper limit.   |\n\n**Response**\n\n- 200: Successful response returning a paginated list of coupon objects."
                        },
                        "response": [],
                        "uid": "21505573-809bc805-bd6d-41f4-bb5d-5e7d0156a6c2"
                    },
                    {
                        "name": "List Calendar Coupons",
                        "id": "5a58f975-d8cb-4208-852e-1b3de4fbecae",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/coupons?pagination_cursor=CURSOR&pagination_limit=20",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "coupons"],
                                "query": [
                                    {
                                        "key": "pagination_cursor",
                                        "value": "CURSOR"
                                    },
                                    {
                                        "key": "pagination_limit",
                                        "value": "20"
                                    }
                                ]
                            },
                            "description": "## List Calendar Coupons\n\nList all coupons that have been created for a calendar.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/calendar/coupons\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                                  |\n|-----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.        |\n\n**Query Parameters**\n\n| Name              | Type   | Required | Description                                                                          |\n|-------------------|--------|----------|--------------------------------------------------------------------------------------|\n| pagination_cursor | string | No       | Value of `next_cursor` from a previous request to fetch the next page.               |\n| pagination_limit  | number | No       | Number of items to return; server may enforce a maximum limit.                      |\n\n**Response**\n- 200: Successful response returning a paginated list of calendar coupons."
                        },
                        "response": [],
                        "uid": "21505573-5a58f975-d8cb-4208-852e-1b3de4fbecae"
                    },
                    {
                        "name": "Create Coupon (Calendar)",
                        "id": "b4e2f717-c4ed-4aa7-b764-72f962dfc0fa",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"code\": \"SUMMER2025\",\n    \"remaining_count\": 100,\n    \"valid_start_at\": \"2023-07-01T00:00:00Z\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/coupons/create",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "coupons", "create"]
                            },
                            "description": "## Create Coupon (Calendar)\n\nCreate a coupon that can be applied to any event managed by the calendar. Be careful not to duplicate coupon codes on an event and on the calendar.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/coupons/create\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                              |\n|----------------|--------|----------|------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.    |\n| Content-Type   | string | Yes      | `application/json`                       |\n\n**JSON Body Parameters**\n\n| Name             | Type    | Required | Description                                                                        |\n|------------------|---------|----------|------------------------------------------------------------------------------------|\n| code             | string  | Yes      | Coupon code for user registration (1–20 chars, not case sensitive).                |\n| remaining_count  | integer | Yes      | Max number of redemptions (0–1,000,000). Use 1,000,000 for unlimited.             |\n| valid_start_at   | string  | No       | ISO 8601 date-time when coupon becomes active (UTC).                               |\n\n**Response**\n\n- 200: Returns the created coupon object, including its unique ID and properties."
                        },
                        "response": [],
                        "uid": "21505573-b4e2f717-c4ed-4aa7-b764-72f962dfc0fa"
                    },
                    {
                        "name": "Update Coupon",
                        "id": "f569ccd0-9b1e-4c8a-83a2-1c0adc929559",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"coupon_api_id\": \"cpn_12345\",\n    \"code\": \"SUMMER2025\",\n    \"remaining_count\": 50,\n    \"valid_start_at\": \"2023-07-01T00:00:00Z\",\n    \"valid_until\": \"2023-08-01T00:00:00Z\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/coupons/update",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "coupons", "update"]
                            },
                            "description": "## Update Coupon\n\nUpdate properties of an existing calendar-level coupon. Once created, coupon terms can be adjusted here but note duplicate codes should be avoided between calendar and event scopes.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/coupons/update\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                              |\n|----------------|--------|----------|------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.    |\n| Content-Type   | string | Yes      | `application/json`                       |\n\n**JSON Body Parameters**\n\n| Name             | Type    | Required | Description                                                       |\n|------------------|---------|----------|-------------------------------------------------------------------|\n| coupon_api_id    | string  | Yes      | API ID of the coupon to update.                                   |\n| code             | string  | Yes      | Coupon code (1–20 chars, not case sensitive).                    |\n| remaining_count  | integer | Yes      | Number of uses remaining (0–1,000,000).                           |\n| valid_start_at   | string  | No       | ISO 8601 start date/time when the coupon becomes active.         |\n| valid_until      | string  | No       | ISO 8601 expiration date/time for the coupon.                    |\n\n**Response**\n\n- 200: Successful response returns the updated coupon object.\n\n> Note: Assumed the `coupon_api_id` parameter based on typical update requirements as it was not visible in the screenshot. Please verify with the full API specification."
                        },
                        "response": [],
                        "uid": "21505573-f569ccd0-9b1e-4c8a-83a2-1c0adc929559"
                    },
                    {
                        "name": "Update Coupon (Calendar)",
                        "id": "d9d2639e-4c62-494e-adb5-bb9e48e7b269",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"code\": \"SUMMER2025\",\n    \"remaining_count\": 50,\n    \"valid_start_at\": \"2023-07-01T00:00:00Z\",\n    \"valid_end_at\": \"2023-08-01T00:00:00Z\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/coupons/update",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "coupons", "update"]
                            },
                            "description": "## Update Coupon (Calendar)\n\nUpdate an existing coupon on your Luma Calendar. You can adjust its redemption limit and validity period.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/coupons/update\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                             |\n|-----------------|--------|----------|-----------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.   |\n| Content-Type    | string | Yes      | `application/json`                      |\n\n**JSON Body Parameters**\n\n| Name             | Type           | Required | Description                                                                                         |\n|------------------|----------------|----------|-----------------------------------------------------------------------------------------------------|\n| code             | string         | Yes      | The coupon code to update. Must match an existing calendar coupon.                                  |\n| remaining_count  | integer        | Yes      | Number of remaining redemptions; use a large integer for effectively unlimited uses.                |\n| valid_start_at   | string or null | No       | ISO 8601 start time (UTC) when the coupon becomes valid. Use `null` to remove the start date.       |\n| valid_end_at     | string or null | No       | ISO 8601 end time (UTC) when the coupon expires. Use `null` to remove the expiry date.              |\n\n**Response**\n\n- 200: Successful response returning the updated coupon object, including its updated properties."
                        },
                        "response": [],
                        "uid": "21505573-d9d2639e-4c62-494e-adb5-bb9e48e7b269"
                    },
                    {
                        "name": "Import People",
                        "id": "05691fab-a6f8-4ceb-b343-1673ed6ec9e5",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"infos\": [\n      { \"email\": \"user@example.com\", \"name\": \"John Doe\" }\n    ],\n    \"tag_api_ids\": [\"tag_123\", \"tag_456\"]\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/import-people",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "import-people"]
                            },
                            "description": "## Import People\n\nBulk import people into your calendar. This endpoint accepts a file upload or structured data payload to add multiple people at once. The specific body parameters were not visible in the provided screenshot.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/import-people\n```\n\n**Notes**\n- Please refer to the full API specification for required body parameters such as file URL or data schema.\n\n## Import People\n\nImport people to your Luma Calendar to easily invite them to events and send newsletters. Provide one or more `infos` objects with each person’s `email` (and optional `name`). Optionally assign calendar tags by specifying their `tag_api_ids`.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/import-people\n```\n\n**Headers**\n| Name           | Type   | Required | Description                             |\n|----------------|--------|----------|-----------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.   |\n| Content-Type   | string | Yes      | `application/json`                      |\n\n**JSON Body Parameters**\n| Name         | Type              | Required | Description                                                                                         |\n|--------------|-------------------|----------|-----------------------------------------------------------------------------------------------------|\n| infos        | array of objects  | Yes      | Objects containing person info (`email`, optional `name`).                                           |\n| tag_api_ids  | array of strings  | No       | API IDs of tags to apply to the imported people.                                                    |\n\n**Response**\n- 200: Successful response returning imported people objects with applied tags."
                        },
                        "response": [],
                        "uid": "21505573-05691fab-a6f8-4ceb-b343-1673ed6ec9e5"
                    },
                    {
                        "name": "Import People",
                        "id": "d3fe5913-1099-4843-8fff-1ae5ab2446dc",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"infos\": [\n      { \"email\": \"user@example.com\", \"name\": \"John Doe\" },\n      { \"email\": \"jane@example.com\" }\n    ],\n    \"tag_api_ids\": [\"tag_abc123\", \"tag_def456\"]\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/import-people",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "import-people"]
                            },
                            "description": "## Import People\n\nImport multiple people into your Luma Calendar and apply tags in bulk.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/import-people\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                               |\n|-----------------|--------|----------|-------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.     |\n| Content-Type    | string | Yes      | `application/json`                        |\n\n**JSON Body Parameters**\n\n| Name        | Type               | Required | Description                                                                                          |\n|-------------|--------------------|----------|------------------------------------------------------------------------------------------------------|\n| infos       | array of objects   | Yes      | People to import. Each object should include an `email` and optionally a `name`. Names for existing users are preserved. |\n| tag_api_ids | array of strings   | Yes      | Tag IDs to apply to the imported people for categorization.                                          |\n\n**Response**\n\n- 200: Successful response returning the imported people and applied tags."
                        },
                        "response": [],
                        "uid": "21505573-d3fe5913-1099-4843-8fff-1ae5ab2446dc"
                    },
                    {
                        "name": "Create Person Tag",
                        "id": "06a787a6-a427-4105-9d02-33c71feee6db",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"name\": \"VIP\",\n    \"color\": \"#ff0000\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/create-person-tag",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "create-person-tag"]
                            },
                            "description": "## Create Person Tag\n\nCreate a new tag for categorizing or labeling people in your Luma Calendar.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/create-person-tag\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                              |\n|-----------------|--------|----------|------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.    |\n| Content-Type    | string | Yes      | `application/json`.                      |\n\n**Body Parameters**\n\n| Name  | Type   | Required | Description                                                              |\n|-------|--------|----------|--------------------------------------------------------------------------|\n| name  | string | Yes      | The name of the person tag.                                               |\n| color | string | No       | Optional hex color code for the tag (e.g., `#ff0000`).                    |\n\n**Response**\n\n- 200: Successful response returning the created person tag object, including its ID, name, and color."
                        },
                        "response": [],
                        "uid": "21505573-06a787a6-a427-4105-9d02-33c71feee6db"
                    },
                    {
                        "name": "Create Person Tag",
                        "id": "58793ca0-d2a8-4200-afed-09e83d7a6da1",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"name\": \"VIP\",\n    \"color\": \"#ff0000\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/create-person-tag",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "create-person-tag"]
                            },
                            "description": "## Create Person Tag\n\nCreate a new person tag for your Luma Calendar. Person tags can be used to categorize or filter people in your calendar.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/create-person-tag\n```\n\n**Headers**\n| Name           | Type   | Required | Description                                |\n|----------------|--------|----------|--------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.      |\n| Content-Type   | string | Yes      | `application/json`                         |\n\n**JSON Body Parameters**\n| Name  | Type   | Required | Description                                                        |\n|-------|--------|----------|--------------------------------------------------------------------|\n| name  | string | Yes      | The display name of the person tag (e.g., `VIP`).                   |\n| color | string | No       | Hex color code for the tag (e.g., `#ff0000`). Defaults if `null`.  |\n\n**Response**\n\n- 200: Returns the created person tag object, including its `tag_api_id`, `name`, and `color`."
                        },
                        "response": [],
                        "uid": "21505573-58793ca0-d2a8-4200-afed-09e83d7a6da1"
                    },
                    {
                        "name": "Update Person Tag",
                        "id": "a95ce453-794c-499a-bc8e-de6e91d9c1cd",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"tag_api_id\": \"tag_abc123\",\n    \"name\": \"VIP Attendees\",\n    \"color\": \"blue\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/update-person-tag",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "update-person-tag"]
                            },
                            "description": "## Update Person Tag\n\nUpdate the properties of an existing person tag within your calendar, such as renaming the tag or changing its color.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/update-person-tag\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                               |\n|-----------------|--------|----------|-------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.     |\n| Content-Type    | string | Yes      | `application/json`                        |\n\n**JSON Body Parameters**\n\n| Name       | Type             | Required | Description                                                              |\n|------------|------------------|----------|--------------------------------------------------------------------------|\n| tag_api_id | string           | Yes      | The API ID of the tag to update (e.g., `tag_abc123`).                    |\n| name       | string           | No       | New name for the tag.                                                    |\n| color      | string (enum)    | No       | New color for the tag. Allowed values (enum) define the tag palette.     |\n\n**Response**\n- 200: Successful response returning the updated person tag object."
                        },
                        "response": [],
                        "uid": "21505573-a95ce453-794c-499a-bc8e-de6e91d9c1cd"
                    },
                    {
                        "name": "Delete Person Tag",
                        "id": "164b97b8-f0e1-44ec-b211-0e74daa4209e",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"tag_api_id\": \"TAG_ID\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/delete-person-tag",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "delete-person-tag"]
                            },
                            "description": "## Delete Person Tag\n\nRemove a person tag from your Luma Calendar. This performs a soft delete; the tag will no longer be available for new associations but may remain in records for historical data.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/delete-person-tag\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                                  |\n|----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.        |\n| Content-Type   | string | Yes      | `application/json`                           |\n\n**JSON Body Parameters**\n\n| Name        | Type   | Required | Description                                         |\n|-------------|--------|----------|-----------------------------------------------------|\n| tag_api_id  | string | Yes      | The API ID of the person tag to delete.             |\n\n**Response**\n\n- 200: Successful response confirming the tag has been deleted."
                        },
                        "response": [],
                        "uid": "21505573-164b97b8-f0e1-44ec-b211-0e74daa4209e"
                    },
                    {
                        "name": "Delete Person Tag",
                        "id": "b4c0f06e-8b44-41fb-8b03-214bc9fe6aab",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"tag_api_id\": \"TAG_API_ID\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/delete-person-tag",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "delete-person-tag"]
                            },
                            "description": "## Delete Person Tag\n\nDelete an existing person tag from your calendar by its API ID. Once deleted, the tag will no longer be available or visible for assignment.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/delete-person-tag\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                                  |\n|----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.        |\n| Content-Type   | string | Yes      | `application/json`                           |\n\n**JSON Body Parameters**\n\n| Name       | Type   | Required | Description                             |\n|------------|--------|----------|-----------------------------------------|\n| tag_api_id | string | Yes      | The API ID of the person tag to delete. |\n\n**Response**\n\n- 200: Successful response confirming the tag has been deleted."
                        },
                        "response": [],
                        "uid": "21505573-b4c0f06e-8b44-41fb-8b03-214bc9fe6aab"
                    },
                    {
                        "name": "Add Event",
                        "id": "0d9b97cd-dc36-4796-94c2-38e692df663a",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"event_api_id\": \"evt_12345\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/add-event",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "add-event"]
                            },
                            "description": "## Add Event\n\nAdd an existing event to your Luma Calendar. This action associates the specified event with the calendar tied to your API key.\n\n**Endpoint**  \n```\nPOST https://public-api.luma.com/v1/calendar/add-event\n```\n\n**Headers**  \n| Name            | Type   | Required | Description                                 |\n|-----------------|--------|----------|---------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.       |\n| Content-Type    | string | Yes      | `application/json`.                         |\n\n**JSON Body Parameters**  \n| Name          | Type   | Required | Description                                                 |\n|---------------|--------|----------|-------------------------------------------------------------|\n| event_api_id  | string | Yes      | The API ID of the event to add (e.g., `evt_12345`).          |\n\n**Response**  \n- 200: Successful response confirming the event has been added to your calendar."
                        },
                        "response": [],
                        "uid": "21505573-0d9b97cd-dc36-4796-94c2-38e692df663a"
                    },
                    {
                        "name": "Add Event",
                        "id": "e136dbb2-1c22-4ea2-960a-315c5e6911f0",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"platform\": \"external\",\n    \"url\": \"https://external.calendar.com/event/123\",\n    \"event_api_id\": \"evt_12345\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/add-event",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "add-event"]
                            },
                            "description": "## Add Event\n\nAdd an existing event (either on Luma or from an external platform) to your Luma Calendar. This action associates the event with the calendar without transferring management to the calendar.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/add-event\n```\n\n**Headers**\n| Name            | Type   | Required | Description                              |\n|-----------------|--------|----------|------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.    |\n| Content-Type    | string | Yes      | `application/json`                       |\n\n**Body Parameters**\n| Name         | Type               | Required | Description                                                                                   |\n|--------------|--------------------|----------|-----------------------------------------------------------------------------------------------|\n| platform     | string (enum)      | Yes      | Source of the event: `luma` or `external`.                                                   |\n| url          | string             | No       | External event URL when `platform=external`.                                                 |\n| event_api_id | string             | No       | Luma event API ID when `platform=luma`.                                                      |\n\n**Response**\n- 200: Successful response confirming the event has been added to the calendar.\n\n> Note: The screenshot showed generic object fields. The exact body schema (field names and requirements) should be confirmed in the full API reference."
                        },
                        "response": [],
                        "uid": "21505573-e136dbb2-1c22-4ea2-960a-315c5e6911f0"
                    },
                    {
                        "name": "Remove Person Tag",
                        "id": "1c50222f-70e6-4f9f-bc11-605f4228e278",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"person_api_id\": \"PERSON_ID\",\n    \"tag_api_id\": \"TAG_ID\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/remove-person-tag",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "remove-person-tag"]
                            },
                            "description": "## Remove Person Tag\n\nRemove an existing tag from a person in your Luma Calendar. This action disassociates the specified tag from the identified person.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/remove-person-tag\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                                  |\n|----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.        |\n| Content-Type   | string | Yes      | `application/json`.                          |\n\n**JSON Body Parameters**\n\n| Name           | Type   | Required | Description                                             |\n|----------------|--------|----------|---------------------------------------------------------|\n| person_api_id  | string | Yes      | The API ID of the person to update.                     |\n| tag_api_id     | string | Yes      | The API ID of the tag to remove from the person’s record. |\n\n**Response**\n\n- 200: Successful response confirming the tag has been removed from the person.\n\n> Note: Parameter names and structures are assumed based on naming conventions; please consult the full API reference for exact field names."
                        },
                        "response": [],
                        "uid": "21505573-1c50222f-70e6-4f9f-bc11-605f4228e278"
                    },
                    {
                        "name": "Remove Person Tag",
                        "id": "9d2389d1-7b0b-4f1e-bcf8-cd6310906811",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"tag\": \"tag_123\",\n    \"user_api_ids\": [\"user_1\", \"user_2\"],\n    \"emails\": [\"user@example.com\"]\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/person-tags/unapply",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "person-tags", "unapply"]
                            },
                            "description": "## Remove Person Tag\n\nRemove a tag from existing calendar members. This action only affects users already imported into the calendar.\n\n**Endpoint**  \n```\nPOST https://public-api.luma.com/v1/calendar/person-tags/unapply\n```\n\n**Headers**  \n| Name            | Type   | Required | Description                               |\n|-----------------|--------|----------|-------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.     |\n| Content-Type    | string | Yes      | `application/json`                        |\n\n**JSON Body Parameters**  \n| Name           | Type               | Required | Description                                                       |\n|----------------|--------------------|----------|-------------------------------------------------------------------|\n| tag            | string             | Yes      | Tag API ID or name to remove (e.g., `tag-123`).                   |\n| user_api_ids   | array of strings   | No       | User API IDs to remove the tag from.                              |\n| emails         | array of strings   | No       | Email addresses to remove the tag from.                           |\n\n**Response**  \n- 200: Successful response confirming the tag has been removed from specified users."
                        },
                        "response": [],
                        "uid": "21505573-9d2389d1-7b0b-4f1e-bcf8-cd6310906811"
                    },
                    {
                        "name": "Remove Person Tag",
                        "id": "a7ef0f0a-ec76-4bb9-bdc1-3590f7c99830",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"tag\": \"tag-123\",\n    \"user_api_ids\": [\"user_abc\",\"user_def\"],\n    \"emails\": [\"alice@example.com\",\"bob@example.com\"]\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/person-tags/unapply",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "person-tags", "unapply"]
                            },
                            "description": "## Remove Person Tag\n\nRemove a specific person tag from existing calendar members. This action unassigns the tag but does not delete it from the calendar.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/person-tags/unapply\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                              |\n|-----------------|--------|----------|------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.    |\n| Content-Type    | string | Yes      | `application/json`                       |\n\n**JSON Body Parameters**\n\n| Name           | Type               | Required | Description                                                                                 |\n|----------------|--------------------|----------|---------------------------------------------------------------------------------------------|\n| tag            | string             | Yes      | Tag API ID or name to remove (e.g., `tag-123`).                                           |\n| user_api_ids   | array of strings   | No       | List of user API IDs from which to remove the tag.                                         |\n| emails         | array of strings   | No       | List of user email addresses from which to remove the tag.                                  |\n\n**Response**\n\n- 200: Successful response confirming the tag has been removed from the specified members."
                        },
                        "response": [],
                        "uid": "21505573-a7ef0f0a-ec76-4bb9-bdc1-3590f7c99830"
                    },
                    {
                        "name": "Apply Person Tag",
                        "id": "2a28739d-4408-4839-b22a-194112197749",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"tag\": \"tag-123\",\n    \"user_api_ids\": [\"user-1\", \"user-2\"],\n    \"emails\": [\"user@example.com\", \"another@example.com\"]\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/calendar/person-tags/apply",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "calendar", "person-tags", "apply"]
                            },
                            "description": "## Apply Person Tag\n\nApply a tag to existing calendar members. This will not create new members.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/calendar/person-tags/apply\n```\n\n**Headers**\n| Name            | Type   | Required | Description                               |\n|-----------------|--------|----------|-------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.     |\n| Content-Type    | string | Yes      | `application/json`                        |\n\n**JSON Body Parameters**\n| Name           | Type              | Required | Description                                                       |\n|----------------|-------------------|----------|-------------------------------------------------------------------|\n| tag            | string            | Yes      | Tag API ID or name to apply (e.g., `tag-123`).                    |\n| user_api_ids   | array of strings  | No       | User API IDs to apply the tag to.                                 |\n| emails         | array of strings  | No       | Email addresses to apply the tag to.                              |\n\n**Response**\n- 200: Successful response confirming the tag has been applied to specified users."
                        },
                        "response": [],
                        "uid": "21505573-2a28739d-4408-4839-b22a-194112197749"
                    }
                ],
                "id": "3cefff9e-b9a9-4e01-b58d-d5aacde3fa3d",
                "uid": "21505573-3cefff9e-b9a9-4e01-b58d-d5aacde3fa3d"
            },
            {
                "name": "Miscellaneous",
                "item": [
                    {
                        "name": "Get Self",
                        "id": "8b8e2b88-59cd-49d9-9523-ebf5ae12d7f8",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/self",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "self"]
                            },
                            "description": "## Get Self\n\nRetrieve information about the authenticated user or API key owner.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/self\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                             |\n|----------------|--------|----------|-----------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.   |\n\n**Query Parameters**\n\nThis endpoint does not accept any query parameters.\n\n**Response**\n\n- 200: Returns the profile and account information of the user associated with the provided API key."
                        },
                        "response": [],
                        "uid": "21505573-8b8e2b88-59cd-49d9-9523-ebf5ae12d7f8"
                    },
                    {
                        "name": "Get Self",
                        "id": "01890384-0735-4b0f-b22b-233dadeac7b8",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/user/get-self",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "user", "get-self"]
                            },
                            "description": "## Get Self\n\nRetrieve information about the current authenticated user.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/user/get-self\n```\n\n**Headers**\n\n| Name           | Type   | Required | Description                                  |\n|----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key | string | Yes      | Your Luma API key for authentication.        |\n\n**Response**\n\n- 200: Successful response returning the authenticated user's details."
                        },
                        "response": [],
                        "uid": "21505573-01890384-0735-4b0f-b22b-233dadeac7b8"
                    },
                    {
                        "name": "Get Self",
                        "id": "3d04588d-b67d-4acb-9228-9c5cf9f18eb4",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Accept",
                                    "value": "application/json"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/user/get-self",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "user", "get-self"]
                            },
                            "description": "## Get Self\n\nRetrieve information about the authenticated user or API key owner.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/user/get-self\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                              |\n|-----------------|--------|----------|------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.    |\n| Accept          | string | Yes      | `application/json`.                      |\n\n**Response**\n- 200: Returns the profile and account information of the user associated with the provided API key."
                        },
                        "response": [],
                        "uid": "21505573-3d04588d-b67d-4acb-9228-9c5cf9f18eb4"
                    },
                    {
                        "name": "Lookup Entity",
                        "id": "1c89e2bf-a63f-4e55-bead-868f7fbe2050",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/entity/lookup?slug=your-slug",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "entity", "lookup"],
                                "query": [
                                    {
                                        "key": "slug",
                                        "value": "your-slug"
                                    }
                                ]
                            },
                            "description": "## Lookup Entity\n\nCheck whether a given slug is already in use by any Luma entity (events, calendars, etc.). This endpoint helps ensure uniqueness before creating or updating an entity with a custom slug.\n\n**Endpoint**  \n```\nGET https://public-api.luma.com/v1/entity/lookup\n```\n\n**Headers**  \n| Name            | Type   | Required | Description                                  |\n|-----------------|--------|----------|----------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.        |\n\n**Query Parameters**  \n| Name  | Type   | Required | Description                                                  |\n|-------|--------|----------|--------------------------------------------------------------|\n| slug  | string | Yes      | The slug to check for availability (e.g., `aloha`).          |\n\n**Response**  \n- 200: Returns an object indicating availability, e.g.:  \n  ```json\n  { \"available\": true }\n  ```"
                        },
                        "response": [],
                        "uid": "21505573-1c89e2bf-a63f-4e55-bead-868f7fbe2050"
                    },
                    {
                        "name": "Lookup Entity",
                        "id": "014e6f6a-7596-41e9-a9be-dabf5dba9772",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "GET",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "url": {
                                "raw": "https://public-api.luma.com/v1/entity/lookup?slug=SLUG",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "entity", "lookup"],
                                "query": [
                                    {
                                        "key": "slug",
                                        "value": "SLUG"
                                    }
                                ]
                            },
                            "description": "## Lookup Entity\n\nRetrieve details for a Luma entity by its slug.\n\n**Endpoint**\n```\nGET https://public-api.luma.com/v1/entity/lookup\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                             |\n|-----------------|--------|----------|-----------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.   |\n\n**Query Parameters**\n\n| Name  | Type   | Required | Description                                       |\n|-------|--------|----------|---------------------------------------------------|\n| slug  | string | Yes      | The URL slug of the entity to look up.            |\n\n**Response**\n- 200: Successful response returning the entity’s details."
                        },
                        "response": [],
                        "uid": "21505573-014e6f6a-7596-41e9-a9be-dabf5dba9772"
                    },
                    {
                        "name": "Create Upload URL",
                        "id": "53d2f2a4-97b8-48b7-984b-50296b21a8f4",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"filename\": \"your-file.jpg\",\n    \"content_type\": \"image/jpeg\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/user/create-upload-url",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "user", "create-upload-url"]
                            },
                            "description": "## Create Upload URL\n\nGenerate a presigned upload URL for uploading assets to the Luma CDN. Use the returned URL to upload your file directly.\n\n**Endpoint**  \n```\nPOST https://public-api.luma.com/v1/user/create-upload-url\n```\n\n**Headers**  \n| Name            | Type   | Required | Description                                |\n|-----------------|--------|----------|--------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.      |\n| Content-Type    | string | Yes      | `application/json`.                        |\n\n**JSON Body Parameters**  \n| Name          | Type    | Required | Description                                               |\n|---------------|---------|----------|-----------------------------------------------------------|\n| filename      | string  | Yes      | Name of the file to be uploaded, including extension.      |\n| content_type  | string  | Yes      | MIME type of the file (e.g., `image/jpeg`, `application/pdf`). |\n\n**Response**  \n- 200: Successful response returning a presigned upload URL and any required fields.  \n\n> Note: Body parameters were not visible in the provided screenshot; assumptions were made based on typical upload URL endpoints. Please verify against the full API specification."
                        },
                        "response": [],
                        "uid": "21505573-53d2f2a4-97b8-48b7-984b-50296b21a8f4"
                    },
                    {
                        "name": "Create Upload URL",
                        "id": "d7a1caf4-6800-4a62-a0db-54791b5bc649",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                },
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"purpose\": \"event-cover\",\n    \"content_type\": \"image/jpeg\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/images/create-upload-url",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "images", "create-upload-url"]
                            },
                            "description": "## Create Upload URL\n\nGenerate a presigned upload URL for uploading images to Luma's CDN. The returned URL can be used with a PUT request to send the file directly.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/images/create-upload-url\n```\n\n**Headers**\n\n| Name            | Type   | Required | Description                                 |\n|-----------------|--------|----------|---------------------------------------------|\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.       |\n| Content-Type    | string | Yes      | `application/json`                          |\n\n**JSON Body Parameters**\n\n| Name         | Type              | Required | Description                                                   |\n|--------------|-------------------|----------|---------------------------------------------------------------|\n| purpose      | string (enum)     | Yes      | Intended use for the upload. Allowed: `event-cover`.          |\n| content_type | string            | No       | MIME type of the file to upload (e.g., `image/jpeg`).         |\n\n**Response**\n\n- 200: Returns an object containing:\n  - `upload_url`: Presigned URL for file upload\n  - `method`: HTTP method to use (usually `PUT`)\n  - `headers`: Any additional headers to include when uploading\n  - `expires_in`: Seconds until the URL expires"
                        },
                        "response": [],
                        "uid": "21505573-d7a1caf4-6800-4a62-a0db-54791b5bc649"
                    },
                    {
                        "name": "Create Upload URL",
                        "id": "ed252772-9a3d-49d5-ad6e-9bcac5c8130a",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "accept",
                                    "value": "application/json"
                                },
                                {
                                    "key": "content-type",
                                    "value": "application/json"
                                },
                                {
                                    "key": "x-luma-api-key",
                                    "value": "YOUR_API_KEY"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"purpose\": \"event-cover\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/images/create-upload-url",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "images", "create-upload-url"]
                            },
                            "description": "## Create Upload URL\n\nGenerate a presigned URL for uploading images to the Luma CDN. Specify the asset’s purpose to ensure correct handling and storage.\n\n**Endpoint**  \n```\nPOST https://public-api.luma.com/v1/images/create-upload-url\n```\n\n**Headers**  \n| Name            | Type   | Required | Description                              |\n|-----------------|--------|----------|------------------------------------------|\n| accept          | string | Yes      | `application/json`                       |\n| content-type    | string | Yes      | `application/json`                       |\n| x-luma-api-key  | string | Yes      | Your Luma API key for authentication.    |\n\n**JSON Body Parameters**  \n| Name    | Type   | Required | Description                                                        |\n|---------|--------|----------|--------------------------------------------------------------------|\n| purpose | string | Yes      | Purpose for the upload URL, e.g., `event-cover`, `user-avatar`.    |\n\n**Response**\n- 200: Returns a presigned upload URL and any required fields for direct upload."
                        },
                        "response": [],
                        "uid": "21505573-ed252772-9a3d-49d5-ad6e-9bcac5c8130a"
                    },
                    {
                        "name": "Create Upload URL",
                        "id": "f4613f2a-2e6a-4b15-af1a-a826d0432fd6",
                        "protocolProfileBehavior": {
                            "disableBodyPruning": true
                        },
                        "request": {
                            "method": "POST",
                            "header": [
                                {
                                    "key": "accept",
                                    "value": "application/json"
                                },
                                {
                                    "key": "content-type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "raw",
                                "raw": "{\n    \"purpose\": \"event-cover\"\n  }",
                                "options": {
                                    "raw": {
                                        "language": "json"
                                    }
                                }
                            },
                            "url": {
                                "raw": "https://public-api.luma.com/v1/images/create-upload-url",
                                "protocol": "https",
                                "host": ["public-api", "luma", "com"],
                                "path": ["v1", "images", "create-upload-url"]
                            },
                            "description": "## Create Upload URL\n\nGenerate a presigned URL for uploading images to the Luma CDN. Specify the upload **purpose** to reserve the correct storage location and usage policy.\n\n**Endpoint**\n```\nPOST https://public-api.luma.com/v1/images/create-upload-url\n```\n\n**Headers**\n\n| Name              | Type   | Required | Description                                 |\n|-------------------|--------|----------|---------------------------------------------|\n| accept            | string | Yes      | `application/json`.                         |\n| content-type      | string | Yes      | `application/json`.                         |\n\n**JSON Body Parameters**\n\n| Name     | Type   | Required | Description                                                        |\n|----------|--------|----------|--------------------------------------------------------------------|\n| purpose  | string | Yes      | The intended use of the upload (e.g., `event-cover`).             |\n\n**Response**\n\n- 200: Returns a JSON object containing a presigned upload URL and any required fields for direct upload."
                        },
                        "response": [],
                        "uid": "21505573-f4613f2a-2e6a-4b15-af1a-a826d0432fd6"
                    }
                ],
                "id": "6226543a-14f5-47bf-99a5-6e1608306082",
                "uid": "21505573-6226543a-14f5-47bf-99a5-6e1608306082"
            }
        ]
    }
}
